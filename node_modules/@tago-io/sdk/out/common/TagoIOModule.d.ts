import { AxiosRequestConfig, Method } from "axios";
import { Regions } from "../regions";
import { RefType, GenericID } from "./common.types";
interface GenericModuleParams {
    token?: string;
    region?: Regions;
}
interface ShareModuleParams extends GenericModuleParams {
    type: RefType;
}
interface TokenModuleParams extends GenericModuleParams {
    path: string;
    id?: GenericID;
}
interface ConnectorModuleParams extends GenericModuleParams {
    details?: boolean;
}
interface AuthorizationModuleParams extends GenericModuleParams {
    details?: boolean;
}
/**
 * Object for generate request params
 * @internal
 */
interface doRequestParams {
    path: string;
    method: Method;
    body?: any;
    params?: any;
    headers?: any;
    overwriteAxiosConfig?: AxiosRequestConfig;
    maxContentLength?: number;
    /**
     * Cache for request
     * default: false (disabled)
     */
    cacheTTL?: number;
}
/**
 * Abstract class to wrap all TagoIO SDK Modules
 * @internal
 */
declare abstract class TagoIOModule<T extends GenericModuleParams> {
    protected params: T;
    constructor(params: T);
    private validateParams;
    protected doRequest<TR>(requestObj: doRequestParams): Promise<TR>;
    protected static doRequestAnonymous<TR>(requestObj: doRequestParams, region?: Regions): Promise<TR>;
}
export default TagoIOModule;
export { GenericModuleParams, ShareModuleParams, doRequestParams, TokenModuleParams, ConnectorModuleParams, AuthorizationModuleParams, };
//# sourceMappingURL=TagoIOModule.d.ts.map