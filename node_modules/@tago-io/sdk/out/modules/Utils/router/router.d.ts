import { Data } from "../../../common/common.types";
import Account from "../../Account/Account";
import { MQTTResourceAction } from "../../Account/actions.types";
import { DeviceCreateInfo } from "../../Account/devices.types";
import { TagoContext } from "../../Analysis/analysis.types";
import Device from "../../Device/Device";
import RouterService from "./service";
declare type Scope = (Data | DeviceCreateInfo | {
    input_form_button_id: string;
} | MQTTResourceAction)[];
declare class RouterConstructor {
    scope: Scope;
    environment: {
        [key: string]: string;
    };
    account?: Account;
    config_dev?: Device;
    context?: TagoContext;
}
declare class AnalysisRouter {
    private params;
    services: RouterService[];
    /**
     * Create an Analysis Router.
     * Use router.register to register new routes for your analysis.
     * Use router.exec() to execute the router and run your functions.
     * Example:
     *      router.register(myFunction).whenInputFormID('create-device-input');
     *      router.exec();
     */
    constructor(params: RouterConstructor);
    register(func: (parameters: RouterConstructor) => any): RouterService;
    /**
     * Start the router. It will pick the service if all conditions are match
     * and send all parameter provided to the final function.
     * @returns json with status and services that run
     */
    exec(): Promise<{
        status: boolean;
        services: string[];
    }>;
}
export { RouterConstructor };
export default AnalysisRouter;
//# sourceMappingURL=router.d.ts.map