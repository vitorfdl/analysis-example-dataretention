import { RouterConstructor } from "./router";
declare class RouterService {
    private serviceFunction;
    private whenList;
    constructor(service: Function);
    private addFunc;
    /**
     * Return true if specific variables are in the scope.
     * Information is available if Analysis is triggered by an widget or action.
     */
    whenVariables(variable: string | string[]): this;
    /**
     * Return true if variable is included in any variable name in the scope.
     * Information is available if Analysis is triggered by an widget or action.
     */
    whenVariableLike(variable: string): this;
    /**
     * Return true if value is present for any variable in the scope
     * Information is available if Analysis is triggered by an widget or action.
     */
    whenValues(values: string | boolean | number | (string | boolean | number)[]): this;
    /**
     * Return true if serie is present for any variable in the scope
     * Information is available if Analysis is triggered by an widget or action.
     */
    whenSeries(series: string | string[]): this;
    /**
     * Return true if input form ID is the same
     * Information is available if Analysis is triggered by an input widget.
     */
    whenInputFormID(id: string): this;
    /**
     * Return true if a parameter in the scope exists
     * Useful to be used with Device List widget.
     */
    whenParameterExists(parameter: string): this;
    /**
     * Return true if widget_exec is the same
     * Information is available if Analysis is triggered by an widget.
     */
    whenWidgetExec(widget_exec: "insert" | "delete" | "edit"): this;
    /**
     * Return true if action_when is the same
     * Information is available if Analysis is triggered by an action.
     */
    whenActionWhen(action_when: "create" | "update" | "delete" | "mqtt_connect" | "mqtt_disconnect"): this;
    /**
     * Return true if action_type is the same
     * Information is available if Analysis is triggered by an action.
     */
    whenActionType(action_type: "resource" | "condition" | "delete"): this;
    /**
     * Return true if input form ID is the same
     * Information is always available.
     */
    whenEnv(key: string, value: string): this;
    /**
     * Start verifying if all when conditions are true.
     */
    verifyConditionsTrue(scope: any, environment: any): boolean;
    /**
     *
     * @param router_params
     * @returns
     */
    runService(router_params: RouterConstructor): any;
    getServiceName(): string;
}
export default RouterService;
//# sourceMappingURL=service.d.ts.map