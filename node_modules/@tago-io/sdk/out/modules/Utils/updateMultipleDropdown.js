"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Go through variables used in Multiple Dropdown variables and remove a specified value.
 * Then updates the variables.
 * @param device TagoIO Device instanced class.
 * @param variables variables inside the device to be verified.
 * @param value value to be removed.
 */
async function updateMultipleDropdown(device, variables, values) {
    const fixed_values = Array.isArray(values) ? values : [values];
    const data_list = await device.getData({ variables, qty: 999 });
    data_list.forEach((item) => {
        var _a;
        let sentValues = (_a = item.metadata) === null || _a === void 0 ? void 0 : _a.sentValues;
        let new_data_value = item.value.split(";");
        if (sentValues.find((x) => fixed_values.includes(x.value))) {
            sentValues = sentValues.filter((x) => {
                if (fixed_values.includes(x.value)) {
                    new_data_value = new_data_value.filter((y) => !fixed_values.includes(y) && !fixed_values.includes(x.label));
                }
                return !fixed_values.includes(x.value);
            });
            const new_item = Object.assign(Object.assign({}, item), { value: new_data_value.join(";"), metadata: Object.assign(Object.assign({}, item.metadata), { sentValues }) });
            device.deleteData({ ids: item.id }).catch((e) => console.error(e));
            device.sendData(new_item).catch((e) => console.error(e));
        }
    });
}
exports.default = updateMultipleDropdown;
//# sourceMappingURL=updateMultipleDropdown.js.map