import Batch from "../../common/BatchRequest";
import { Data, GenericID } from "../../common/common.types";
import TagoIOModule from "../../common/TagoIOModule";
import { ConfigurationParams } from "../Account/devices.types";
import { DataQuery, DataQueryStreaming, DataToSend, DeviceConstructorParams, DeviceInfo, OptionsStreaming } from "./device.types";
declare class Device extends TagoIOModule<DeviceConstructorParams> {
    /**
     * Get information about the current device
     * @example
     * ```js
     * const myDevice = new Device({ token: "my_device_token" });
     *
     * const result = await myDevice.info();
     * ```
     */
    info(): Promise<DeviceInfo>;
    /**
     * Send data to device
     * @param data An array or one object with data to be send to TagoIO using device token
     * @example
     * ```js
     * const myDevice = new Device({ token: "my_device_token" });
     *
     * const result = await myDevice.sendData({
     *   variable: "temperature",
     *   unit: "F",
     *   value: 55,
     *   time: "2015-11-03 13:44:33",
     *   location: { lat: 42.2974279, lng: -85.628292 },
     * });
     * ```
     */
    sendData(data: DataToSend | DataToSend[]): Promise<string>;
    /**
     * Get data from TagoIO Device.
     * @param queryParams Object with query params
     * @returns An array of TagoIO registers
     * @example
     * ```js
     * const myDevice = new Device({ token: "my_device_token" });
     *
     * const result = await myDevice.getData({
     *   query: "last_item",
     *   variable: "humidity",
     * });
     * ```
     */
    getData(queryParams?: DataQuery): Promise<Data[]>;
    /**
     * Delete data from device
     * @param queryParams
     * @example
     * ```js
     * const myDevice = new Device({ token: "my_device_token" });
     *
     * const result = await myDevice.deleteData({
     *   query: "last_item",
     *   variable: "humidity",
     *   value: 10
     * });
     * ```
     */
    deleteData(queryParams?: DataQuery): Promise<string>;
    /**
     * Get parameters from device
     * @param onlyUnRead set true to get only unread parameters
     * @example
     * ```js
     * const myDevice = new Device({ token: "my_device_token" });
     *
     * const result = await myDevice.getParameters();
     * ```
     */
    getParameters(onlyUnRead?: boolean): Promise<ConfigurationParams[]>;
    /**
     * Mark parameter as read
     * @param parameterID Parameter identification
     * @example
     * ```js
     * const myDevice = new Device({ token: "my_device_token" });
     *
     * const result = await myDevice.setParameterAsRead("parameter_id");
     * ```
     *
     */
    setParameterAsRead(parameterID: GenericID): Promise<string>;
    /**
     * Get Data Streaming
     *
     * @experimental
     * @param params Data Query
     * @param options Stream options
     * @example
     * ```js
     * const myDevice = new Device({ token: "my_device_token" });
     *
     * for await (const items of myDevice.getDataStreaming()) {
     *  console.log(items);
     * }
     * ```
     */
    getDataStreaming(params?: DataQueryStreaming, options?: OptionsStreaming): AsyncGenerator<Data[], void, unknown>;
    /**
     * Stream data to device
     *
     * @experimental
     * @param data An array or one object with data to be send to TagoIO using device token
     * @param options Stream options
     * @example
     * ```js
     * const myDevice = new Device({ token: "my_device_token" });
     *
     * const data = [
     *     {
     *       variable: "temperature",
     *       unit: "F",
     *       value: 55,
     *       time: "2015-11-03 13:44:33",
     *       location: { lat: 42.2974279, lng: -85.628292 },
     *     },
     *     {
     *       variable: "temperature",
     *       unit: "F",
     *       value: 53,
     *       time: "2015-11-03 13:44:33",
     *       location: { lat: 43.2974279, lng: -86.628292 },
     *     },
     *     // ...
     *   ];
     *
     *   const result = await myDevice.sendDataStreaming(data, {
     *     poolingRecordQty: 1000,
     *     poolingTime: 1000,
     *   });
     * ```
     */
    sendDataStreaming(data: DataToSend[], options: Omit<OptionsStreaming, "neverStop">): Promise<string>;
    batch: Batch;
}
export default Device;
//# sourceMappingURL=Device.d.ts.map