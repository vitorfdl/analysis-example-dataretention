import { GenericID, GenericToken } from "../../common/common.types";
import TagoIOModule, { GenericModuleParams } from "../../common/TagoIOModule";
import { Regions } from "../../regions";
import { NotificationInfo, NotificationQuery } from "../Account/notifications.types";
import { OTPType } from "../Account/account.types";
import { RunUserCreateInfo, RunUserCreate, RunUserInfo, RunUserLogin, RunUserLoginResponse, RunUserCredentials } from "./runUser.types";
import SDB from "./SDB";
declare class RunUser extends TagoIOModule<GenericModuleParams> {
    /**
     * Get Run user info
     * @param tagoIORunURL TagoIO Run url without http
     */
    info(tagoIORunURL: string): Promise<RunUserInfo>;
    /**
     * Create new TagoIO Run User (Anonymous)
     * @param tagoIORunURL TagoIO Run url without http
     * @param newUserObj New user data
     * @param region TagoIO Region Server [default usa-1]
     */
    static create(tagoIORunURL: string, newUserObj: RunUserCreateInfo, region?: Regions): Promise<RunUserCreate>;
    /**
     * Edit Run user info
     * @param tagoIORunURL TagoIO Run url without http
     * @param userChangesObj Data to change in user
     */
    edit(tagoIORunURL: string, userChangesObj: Partial<RunUserInfo>): Promise<string>;
    /**
     * Login at TagoIO Run as user (Anonymous)
     * @param tagoIORunURL TagoIO Run url without http
     * @param credentialsObj Run user credentials
     * @param region TagoIO Region Server [default usa-1]
     */
    static login(tagoIORunURL: string, credentialsObj: RunUserLogin, region?: Regions): Promise<RunUserLoginResponse>;
    /**
     * Confirm User on TagoIO Run (Anonymous)
     * @param tagoIORunURL TagoIO Run url without http
     * @param token TagoIO Run user token
     * @param region TagoIO Region Server [default usa-1]
     */
    static confirmUser(tagoIORunURL: string, token: GenericToken, region?: Regions): Promise<string>;
    /**
     * Sends a password recover e-mail
     * @param tagoIORunURL TagoIO Run url without http
     * @param email Run user email to recover the password
     * @param region TagoIO Region Server [default usa-1]
     */
    static passwordRecover(tagoIORunURL: string, email: string, region?: Regions): Promise<string>;
    /**
     * Change password using token of the password recover.
     * @param tagoIORunURL TagoIO Run url without http
     * @param password New password
     */
    passwordChange(tagoIORunURL: string, password: string): Promise<string>;
    /**
     * List notifications.
     * @param tagoIORunURL TagoIO Run url without http
     */
    notificationList(tagoIORunURL: string, queryObj?: NotificationQuery): Promise<NotificationInfo[]>;
    /**
     * Mark notification as read
     * @param tagoIORunURL TagoIO Run url without http
     * @param notificationIDs array of notification ids or a single id
     */
    notificationMarkRead(tagoIORunURL: string, notificationIDs: GenericID | GenericID[]): Promise<string>;
    /**
     * Mark notification as unread
     * @param tagoIORunURL TagoIO Run url without http
     * @param notificationIDs array of notification ids or a single id
     */
    notificationMarkUnread(tagoIORunURL: string, notificationIDs: GenericID | GenericID[]): Promise<string>;
    /**
     * Mark all notifications as read
     * @param tagoIORunURL TagoIO Run url without http
     */
    notificationMarkAllRead(tagoIORunURL: string): Promise<string>;
    /**
     * Trigger notification button
     * @param tagoIORunURL TagoIO Run url without http
     * @param notificationID TagoIO Run notification id
     * @param buttonID Notification button id
     */
    notificationButton(tagoIORunURL: string, notificationID: GenericID, buttonID: GenericID): Promise<any>;
    /**
     * Delete notification
     * @param tagoIORunURL TagoIO Run url without http
     * @param notificationID TagoIO Run notification id
     */
    notificationDelete(tagoIORunURL: string, notificationID: GenericID): Promise<string>;
    /**
     * Request the PIN Code for a given OTP Type.
     * @param credentials Credentials
     * @param typeOTP authenticator, sms or email
     */
    static requestLoginPINCode(tagoIORunURL: string, credentials: RunUserCredentials, typeOTP: OTPType): Promise<string>;
    /**
     * Enable OTP for a given OTP Type.
     * You will be requested to confirm the operation with a pin code.
     * @param credentials Credentials
     * @param typeOTP authenticator, sms or email
     */
    enableOTP(tagoIORunURL: string, credentials: RunUserCredentials, typeOTP: OTPType): Promise<string>;
    /**
     * Enable OTP for a given OTP Type
     * @param credentials Credentials
     * @param typeOTP authenticator, sms or email
     */
    disableOTP(tagoIORunURL: string, credentials: RunUserCredentials, typeOTP: OTPType): Promise<string>;
    /**
     * Confirm OTP enabling process for a given OTP Type
     * @param credentials Credentials
     * @param typeOTP authenticator, sms or email
     */
    confirmOTP(tagoIORunURL: string, pinCode: string, typeOTP: OTPType): Promise<string>;
    SDB: SDB;
}
export default RunUser;
//# sourceMappingURL=RunUser.d.ts.map