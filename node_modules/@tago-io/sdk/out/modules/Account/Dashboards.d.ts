import { ExpireTimeOption, GenericID } from "../../common/common.types";
import TagoIOModule, { GenericModuleParams } from "../../common/TagoIOModule";
import { InviteInfo, InviteResponse } from "./_share.types";
import Widgets from "./Dashboard.Widgets";
import { DashboardCreateInfo, DashboardInfo, DashboardQuery, DevicesRelated, AnalysisRelated, PublicKeyResponse } from "./dashboards.types";
declare class Dashboards extends TagoIOModule<GenericModuleParams> {
    /**
     * Retrieves a list with all dashboards from the account
     * @default
     * ```json
     * queryObj: {
     *   page: 1,
     *   fields: ["id", "name"],
     *   filter: {},
     *   amount: 20,
     *   orderBy: "label,asc",
     * }
     * ```
     * @param queryObj Search query params
     */
    list(queryObj?: DashboardQuery): Promise<DashboardInfo[]>;
    /**
     * Generates and retrieves a new dashboard from the account
     * @param dashboardObj Object data to create new Dashboard
     */
    create(dashboardObj: DashboardCreateInfo): Promise<{
        dashboard: GenericID;
    }>;
    /**
     * Modify any property of the action
     * @param dashboardID Dashboard identification
     * @param dashboardObj Dashboard Object with data to be replaced
     */
    edit(dashboardID: GenericID, dashboardObj: Partial<DashboardInfo>): Promise<string>;
    /**
     * Deletes an dashboard from the account
     * @param dashboardID Dashboard identification
     */
    delete(dashboardID: GenericID): Promise<string>;
    /**
     * Gets information about the dashboard
     * @param dashboardID Dashboard identification
     */
    info(dashboardID: GenericID): Promise<DashboardInfo>;
    /**
     * Duplicate the dashboard to your own account
     * @param dashboardID Dashboard identification
     * @param dashboardObj Object with data of the duplicate dashboard
     */
    duplicate(dashboardID: GenericID, dashboardObj?: {
        setup?: object;
        new_label?: string;
    }): Promise<{
        dashboard_id: string;
        message: string;
    }>;
    /**
     * Get share list of the dashboard
     * @param dashboardID Dashboard identification
     */
    shareList(dashboardID: GenericID): Promise<InviteInfo[]>;
    /**
     * Share the dashboard with another person
     * @param dashboardID Dashboard identification
     * @param inviteObj Object with target and message
     */
    shareSendInvite(dashboardID: GenericID, inviteObj: InviteInfo): Promise<InviteResponse>;
    /**
     * Change permissions of the bucket
     * @param shareID Share identification
     * @param targetObj Object with target email and new permission
     */
    shareEdit(shareID: GenericID, targetObj: Partial<InviteInfo>): Promise<string>;
    /**
     * Remove share of the bucket
     * @param shareID Share identification
     */
    shareDelete(shareID: GenericID): Promise<string>;
    /**
     * Generate a new public token for the dashboard
     * @param dashboardID Dashboard identification
     * @param expireTime Time when token will expire
     */
    getPublicKey(dashboardID: GenericID, expireTime?: ExpireTimeOption): Promise<PublicKeyResponse>;
    /**
     * Get list of devices related with dashboard
     * @param dashboardID Dashboard identification
     */
    listDevicesRelated(dashboardID: GenericID): Promise<DevicesRelated[]>;
    /**
     * Get list of analysis related with a dashboard
     * @param dashboardID Dashboard identification
     */
    listAnalysisRelated(dashboardID: GenericID): Promise<AnalysisRelated[]>;
    /**
     * Runs an analysis located in a widget's header button
     * @param analysisID The id of the analysis to run
     * @param dashboardID The id of the dashboard that contains the widget
     * @param widgetID The id of the widget that contains the header button
     * @param scope Data to send to the analysis
     */
    runWidgetHeaderButtonAnalysis(analysisID: GenericID, dashboardID: GenericID, widgetID: GenericID, scope?: object): Promise<string>;
    private share;
    widgets: Widgets;
}
export default Dashboards;
//# sourceMappingURL=Dashboards.d.ts.map