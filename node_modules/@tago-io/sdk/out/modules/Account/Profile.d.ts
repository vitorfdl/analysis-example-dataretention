import { GenericID, GenericToken, ListTokenQuery, TokenCreateResponse, TokenData, TokenDataList } from "../../common/common.types";
import TagoIOModule, { GenericModuleParams } from "../../common/TagoIOModule";
import { AddonInfo, AuditLog, AuditLogFilter, ProfileInfo, ProfileListInfo, ProfileSummary, UsageStatistic } from "./profile.types";
declare class Profile extends TagoIOModule<GenericModuleParams> {
    /**
     * Lists all the profiles in your account
     */
    list(): Promise<ProfileListInfo[]>;
    /**
     * Get Profile info
     * @param profileID Profile identification
     */
    info(profileID: GenericID): Promise<ProfileInfo>;
    /**
     * Gets profile summary
     */
    summary(profileID: GenericID): Promise<ProfileSummary>;
    /**
     * Create a profile
     * @param profileObj Profile object with data to be created
     */
    create(profileObj: {
        name: string;
    }): Promise<{
        id: GenericID;
    }>;
    /**
     * Edits a profile
     * @param profileObj Profile object with data to be changed
     */
    edit(profileID: GenericID, profileObj: Partial<ProfileInfo>): Promise<string>;
    /**
     * Delete profile
     * @param profileID Profile identification
     */
    delete(profileID: GenericID): Promise<string>;
    /**
     * List all the usage statistics of your profile
     * @param profileID Profile identification
     * @param dateObj Object with date and their timezone
     */
    usageStatisticList(profileID: GenericID, dateObj?: {
        date?: string;
        timezone?: string;
    }): Promise<UsageStatistic[]>;
    /**
     * Fetches the information from auditlog of this profile
     * @param profileID Profile identification
     * @param filterObj auditlog filter object
     */
    auditLog(profileID: GenericID, filterObj?: AuditLogFilter): Promise<AuditLog>;
    /**
     * Gets the information of addons for the profile
     * @param profileID Profile identification
     */
    addonList(profileID: GenericID): Promise<AddonInfo>;
    /**
     * Sets the information of addons for the profile
     * @param profileID Profile identification
     * @param addonObj
     */
    addonEdit(profileID: GenericID, addonObj: Partial<AddonInfo>): Promise<string>;
    /**
     * Sets the information of services for the profile. Services are the main resources
     * in your profile, for example data input, data output, etc...
     * @param profileID Profile identification
     * @param serviceObj
     */
    serviceEdit(profileID: GenericID, serviceObj: object): Promise<string>;
    /**
     * Transforms the current token to another profile. The current profile will
     * no longer have the current token, as the current token will be acquired by the profile informed.
     * After this call is done, other requests using this token will work solely for the new profile, and
     * no longer for the current profile.
     * @param targetProfileID Profile identification
     */
    transferTokenToAnotherProfile(targetProfileID: GenericID): Promise<string>;
    /**
     * Retrieves a list of all tokens
     * @param profileID Profile ID
     * @param queryObj Search query params
     */
    tokenList(profileID: GenericID, queryObj?: ListTokenQuery): Promise<Partial<TokenDataList>[]>;
    /**
     * Generates and retrieves a new token
     * @param profileID Profile ID
     * @param tokenParams Token params for new token
     */
    tokenCreate(profileID: GenericID, tokenParams: TokenData): Promise<TokenCreateResponse>;
    /**
     * Deletes a token
     * @param token Token
     */
    tokenDelete(token: GenericToken): Promise<string>;
}
export default Profile;
//# sourceMappingURL=Profile.d.ts.map