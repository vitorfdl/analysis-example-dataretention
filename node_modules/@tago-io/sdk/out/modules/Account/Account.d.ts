import Batch from "../../common/BatchRequest";
import { GenericToken } from "../../common/common.types";
import TagoIOModule, { GenericModuleParams } from "../../common/TagoIOModule";
import Access from "./Access";
import { AccountCreateInfo, AccountInfo, LoginResponse, OTPType, TokenCreateInfo } from "./account.types";
import Actions from "./Actions";
import Analyses from "./Analyses";
import Buckets from "./Buckets";
import Dashboards from "./Dashboards";
import Devices from "./Devices";
import Dictionaries from "./Dictionaries";
import Explore from "./Explore";
import Files from "./Files";
import Notifications from "./Notifications";
import PaymentHistory from "./PaymentHistory";
import PaymentMethods from "./PaymentMethods";
import Plan from "./Plan";
import Profile from "./Profile";
import Run from "./Run";
import ServiceAuthorization from "./ServiceAuthorization";
import Tags from "./Tags";
import Template from "./Template";
import { Regions } from "../../regions";
import Integration from "./Integration";
/**
 * To set up an account object, you need a token that you need to get from our
 * admin website and the region. Make sure to use tokens with the correct
 * write/read privileges for the current function that you want to use.
 *
 * @class Account
 * @extends {TagoIOModule<GenericModuleParams>}
 */
declare class Account extends TagoIOModule<GenericModuleParams> {
    /**
     * Gets all account information
     */
    info(): Promise<AccountInfo>;
    /**
     * Edit account
     * @param accountObj Account data to edit
     */
    edit(accountObj: Partial<AccountInfo>): Promise<string>;
    /**
     * Delete account
     */
    delete(): Promise<string>;
    /**
     * Generates and retrieves a new token for the account
     * @param tokenParams Token data
     * @param region TagoIO Region Server [default usa-1]
     */
    static tokenCreate(tokenParams: TokenCreateInfo, region?: Regions): Promise<{
        token: GenericToken;
    }>;
    /**
     * Retrieve list of profiles for login and do Login
     * @param credentials Credentials
     * @param region TagoIO Region Server [default usa-1]
     */
    static login(credentials: {
        email: string;
        password: string;
    }, region?: Regions): Promise<LoginResponse>;
    /**
     * Send password recover email
     * @param email E-mail to recovery
     * @param region TagoIO Region Server [default usa-1]
     */
    static passwordRecover(email: string, region?: Regions): Promise<string>;
    /**
     * Change account password
     * @param password New Password
     */
    passwordChange(password: string): Promise<string>;
    /**
     * Create new TagoIO account
     * @param createParams New account details
     * @param region TagoIO Region Server [default usa-1]
     */
    static create(createParams: AccountCreateInfo, region?: Regions): Promise<string>;
    /**
     *  Re-send confirmation account email
     * @param email E-mail address
     * @param region TagoIO Region Server [default usa-1]
     */
    static resendConfirmation(email: string, region?: Regions): Promise<string>;
    /**
     * Confirm account creation
     * @param token Confirmation token
     * @param region TagoIO Region Server [default usa-1]
     */
    static confirmAccount(token: GenericToken, region?: Regions): Promise<string>;
    /**
     * Request the PIN Code for a given OTP Type.
     * @param credentials Credentials
     * @param typeOTP authenticator, sms or email
     */
    static requestLoginPINCode(credentials: {
        email: string;
        password: string;
    }, typeOTP: OTPType, region?: Regions): Promise<string>;
    /**
     * Enable OTP for a given OTP Type.
     * You will be requested to confirm the operation with a pin code.
     * @param credentials Credentials
     * @param typeOTP authenticator, sms or email
     */
    enableOTP(credentials: {
        email: string;
        password: string;
    }, typeOTP: OTPType): Promise<string>;
    /**
     * Enable OTP for a given OTP Type
     * @param credentials Credentials
     * @param typeOTP authenticator, sms or email
     */
    disableOTP(credentials: {
        email: string;
        password: string;
    }, typeOTP: OTPType): Promise<string>;
    /**
     * Confirm OTP enabling proccses for a given OTP Type
     * @param credentials Credentials
     * @param typeOTP authenticator, sms or email
     */
    confirmOTP(pinCode: string, typeOTP: OTPType): Promise<string>;
    /**
     * Send a batch commands
     */
    batch: Batch;
    /**
     * Manage actions in account.
     * Be sure to use an account token with “write” permissions when
     * using functions like create, edit and delete.
     */
    actions: Actions;
    /**
     * Manage analysis in account
     * Be sure to use an account token with “write” permissions when using
     * functions like create, edit and delete.
     */
    analysis: Analyses;
    /**
     * Manage buckets in account
     * Be sure to use an account token with “write” permissions when using
     * functions like create, edit and delete.
     */
    buckets: Buckets;
    /**
     * Manage files in account
     * Be sure to use an account token with “write” permissions when using
     * functions like create, edit and delete.
     */
    files: Files;
    /**
     * Manage dashboards in account
     * Be sure to use an account token with “write” permissions when using
     * functions like create, edit and delete.
     */
    dashboards: Dashboards;
    /**
     * Manage devices in account
     * Be sure to use an account token with “write” permissions when using
     * functions like create, edit and delete.
     */
    devices: Devices;
    /**
     * Manage dictionaries in account
     * Be sure to use an account token with “write” permissions when using
     * functions like create, edit and delete.
     */
    dictionaries: Dictionaries;
    /**
     * Manage notifications in account
     * Be sure to use an account token with “write” permissions when using
     * functions like create, edit and delete.
     */
    notifications: Notifications;
    /**
     * Manage tags in account
     * Be sure to use an account token with “write” permissions when using
     * functions like create, edit and delete.
     */
    tags: Tags;
    /**
     * Manage payment methods in account
     * Be sure to use an account token with “write” permissions when using
     * functions like create, edit and delete.
     */
    paymentMethods: PaymentMethods;
    /**
     * Manage account plans
     * Be sure to use an account token with “write” permissions when using
     * functions like create, edit and delete.
     */
    plan: Plan;
    /**
     * Manage payment history in account
     * Be sure to use an account token with “write” permissions when using
     * functions like create, edit and delete.
     */
    paymentHistory: PaymentHistory;
    /**
     * Manage explore in account
     * Be sure to use an account token with “write” permissions when using
     * functions like create, edit and delete.
     */
    explore: Explore;
    /**
     * Manage connectors in account
     * Be sure to use an account token with “write” permissions when using
     * functions like create, edit and delete.
     */
    integration: Integration;
    /**
     * Manage templates in account
     * Be sure to use an account token with “write” permissions when using
     * functions like create, edit and delete.
     */
    template: Template;
    /**
     * Manage access in account
     * Be sure to use an account token with “write” permissions when using
     * functions like create, edit and delete.
     */
    accessManagement: Access;
    /**
     * Manage run apps in account
     * Be sure to use an account token with “write” permissions when using
     * functions like create, edit and delete.
     *
     */
    run: Run;
    /**
     * Manage services in account
     * Be sure to use an account token with “write” permissions when using
     * functions like create, edit and delete.
     */
    ServiceAuthorization: ServiceAuthorization;
    /**
     * Manage profiles in account
     * Be sure to use an account token with “write” permissions when using
     * functions like create, edit and delete.
     */
    profiles: Profile;
}
export default Account;
//# sourceMappingURL=Account.d.ts.map