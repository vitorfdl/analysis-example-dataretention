import { ExportOption, GenericID } from "../../common/common.types";
import TagoIOModule, { GenericModuleParams } from "../../common/TagoIOModule";
import { BucketCreateInfo, BucketDeviceInfo, BucketInfo, BucketQuery, ExportBucket, ExportBucketOption, ListVariablesOptions, VariablesInfo } from "./buckets.types";
declare class Buckets extends TagoIOModule<GenericModuleParams> {
    /**
     * Retrieves a list with all buckets from account
     * @default
     * ```json
     * queryObj: {
     *   page: 1,
     *   fields: ["id", "name"],
     *   filter: {},
     *   amount: 20,
     *   orderBy: "name,asc",
     * }
     * ```
     * @param queryObj Search query params
     */
    list(queryObj?: BucketQuery): Promise<BucketInfo[]>;
    /**
     * Generates and retrieves a new bucket for the account
     * @param bucketObj Object with data to create new bucket
     */
    create(bucketObj: BucketCreateInfo): Promise<{
        bucket: string;
    }>;
    /**
     * Modifies any property of the bucket.
     * @param bucketID Bucket ID
     * @param bucketObj Bucket Object data to be replaced
     */
    edit(bucketID: GenericID, bucketObj: Partial<BucketCreateInfo>): Promise<string>;
    /**
     * Deletes a bucket from the account
     * @param bucketID Bucket ID
     */
    delete(bucketID: GenericID): Promise<string>;
    /**
     * Gets information about the bucket
     * @param bucketID Bucket ID
     */
    info(bucketID: GenericID): Promise<BucketInfo>;
    /**
     * Get Amount of data on the Bucket
     * @param bucketID Bucket ID
     */
    amount(bucketID: GenericID): Promise<number>;
    /**
     * List variables inside the bucket
     * @default
     * ```json
     * optionsObj: {
     *   showAmount: false
     *   showDeleted: false
     *   resolveOriginName: false
     * }
     * ```
     * @param bucketID Bucket ID
     * @param optionsObj Request options
     */
    listVariables(bucketID: GenericID, optionsObj?: ListVariablesOptions): Promise<VariablesInfo[]>;
    /**
     * Delete a bucket variable
     * @param bucketID Bucket ID
     * @param deleteParams Variable Details
     */
    deleteVariable(bucketID: GenericID, deleteParams: {
        variable: string;
        origin: string;
    }): Promise<string>;
    /**
     * Get all device associated with bucket
     * @param bucketID Bucket ID
     */
    getDevicesAssociated(bucketID: GenericID): Promise<BucketDeviceInfo[]>;
    /**
     * Export Data from Bucket
     * @param buckets Array of JSON with get details
     * @param output Type of output
     * @param optionsObj Options of request
     */
    exportData(buckets: ExportBucket, output: ExportOption, optionsObj?: ExportBucketOption): Promise<string>;
}
export default Buckets;
//# sourceMappingURL=Buckets.d.ts.map