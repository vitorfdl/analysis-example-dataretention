"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const TagoIOModule_1 = __importDefault(require("../../common/TagoIOModule"));
const dateParser_1 = __importDefault(require("../Utils/dateParser"));
class Devices extends TagoIOModule_1.default {
    /**
     * Retrieves a list with all devices from the account
     * @default
     * queryObj: {
     *   page: 1,
     *   fields: ["id", "name"],
     *   filter: {},
     *   amount: 20,
     *   orderBy: "name,asc",
     *   resolveBucketName: false
     * }
     * @param queryObj Search query params
     */
    async list(queryObj) {
        let result = await this.doRequest({
            path: "/device",
            method: "GET",
            params: {
                page: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.page) || 1,
                fields: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.fields) || ["id", "name"],
                filter: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.filter) || {},
                amount: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.amount) || 20,
                orderBy: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.orderBy) ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : "name,asc",
                resolveBucketName: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.resolveBucketName) || false,
            },
        });
        result = result.map((data) => dateParser_1.default(data, ["last_input", "last_output", "updated_at", "created_at", "inspected_at"]));
        return result;
    }
    /**
     * Generates and retrieves a new action from the Device
     * @param deviceObj Object data to create new device
     */
    async create(deviceObj) {
        const result = await this.doRequest({
            path: "/device",
            method: "POST",
            body: deviceObj,
        });
        return result;
    }
    /**
     * Modify any property of the device
     * @param deviceID Device ID
     * @param deviceObj Device object with fields to replace
     */
    async edit(deviceID, deviceObj) {
        const result = await this.doRequest({
            path: `/device/${deviceID}`,
            method: "PUT",
            body: deviceObj,
        });
        return result;
    }
    /**
     * Deletes an device from the account
     * @param deviceID Device ID
     */
    async delete(deviceID) {
        const result = await this.doRequest({
            path: `/device/${deviceID}`,
            method: "DELETE",
        });
        return result;
    }
    /**
     * Get Info of the Device
     * @param deviceID Device ID
     */
    async info(deviceID) {
        let result = await this.doRequest({
            path: `/device/${deviceID}`,
            method: "GET",
        });
        result = dateParser_1.default(result, ["last_input", "last_output", "updated_at", "created_at", "inspected_at"]);
        return result;
    }
    /**
     * Create or edit param for the Device
     * @param deviceID Device ID
     * @param configObj Configuration Data
     * @param paramID Parameter ID
     */
    async paramSet(deviceID, configObj, paramID) {
        const result = await this.doRequest({
            path: `/device/${deviceID}/params`,
            method: "POST",
            body: paramID
                ? Object.assign({ id: paramID }, configObj) : configObj,
        });
        return result;
    }
    /**
     * List Params for the Device
     * @param deviceID Device ID
     * @param sentStatus True return only sent=true, False return only sent=false
     */
    async paramList(deviceID, sentStatus) {
        const result = await this.doRequest({
            path: `/device/${deviceID}/params`,
            method: "GET",
            params: { sent_status: sentStatus },
        });
        return result;
    }
    /**
     * Remove param for the Device
     * @param deviceID Device ID
     * @param paramID Parameter ID
     */
    async paramRemove(deviceID, paramID) {
        const result = await this.doRequest({
            path: `/device/${deviceID}/params/${paramID}`,
            method: "DELETE",
        });
        return result;
    }
    /**
     * Retrieves a list of all tokens
     * @default
     * queryObj: {
     *   page: 1,
     *   fields: ["name", "token", "permission"],
     *   filter: {},
     *   amount: 20,
     *   orderBy: "created_at,desc",
     * }
     * @param deviceID Device ID
     * @param queryObj Search query params
     */
    async tokenList(deviceID, queryObj) {
        let result = await this.doRequest({
            path: `/device/token/${deviceID}`,
            method: "GET",
            params: {
                page: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.page) || 1,
                fields: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.fields) || ["name", "token", "permission"],
                filter: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.filter) || {},
                amount: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.amount) || 20,
                orderBy: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.orderBy) ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : "created_at,desc",
            },
        });
        result = result.map((data) => dateParser_1.default(data, ["created_at", "last_authorization", "expire_time"]));
        return result;
    }
    /**
     * Generates and retrieves a new token
     * @param deviceID Device ID
     * @param tokenParams Params for new token
     */
    async tokenCreate(deviceID, tokenParams) {
        let result = await this.doRequest({
            path: `/device/token`,
            method: "POST",
            body: Object.assign({ device: deviceID }, tokenParams),
        });
        result = dateParser_1.default(result, ["expire_date"]);
        return result;
    }
    /**
     * Delete a token
     * @param token Token
     */
    async tokenDelete(token) {
        const result = await this.doRequest({
            path: `/device/token/${token}`,
            method: "DELETE",
        });
        return result;
    }
}
exports.default = Devices;
//# sourceMappingURL=Devices.js.map