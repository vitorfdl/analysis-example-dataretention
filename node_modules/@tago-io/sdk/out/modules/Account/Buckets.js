"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const TagoIOModule_1 = __importDefault(require("../../common/TagoIOModule"));
const dateParser_1 = __importDefault(require("../Utils/dateParser"));
class Buckets extends TagoIOModule_1.default {
    /**
     * Retrieves a list with all buckets from account
     * @default
     * ```json
     * queryObj: {
     *   page: 1,
     *   fields: ["id", "name"],
     *   filter: {},
     *   amount: 20,
     *   orderBy: "name,asc",
     * }
     * ```
     * @param queryObj Search query params
     */
    async list(queryObj) {
        let result = await this.doRequest({
            path: "/bucket",
            method: "GET",
            params: {
                page: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.page) || 1,
                fields: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.fields) || ["id", "name"],
                filter: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.filter) || {},
                amount: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.amount) || 20,
                orderBy: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.orderBy) ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : "name,asc",
            },
        });
        result = result.map((data) => dateParser_1.default(data, ["created_at", "updated_at"]));
        return result;
    }
    /**
     * Generates and retrieves a new bucket for the account
     * @param bucketObj Object with data to create new bucket
     */
    async create(bucketObj) {
        const result = await this.doRequest({
            path: "/bucket",
            method: "POST",
            body: bucketObj,
        });
        return result;
    }
    /**
     * Modifies any property of the bucket.
     * @param bucketID Bucket ID
     * @param bucketObj Bucket Object data to be replaced
     */
    async edit(bucketID, bucketObj) {
        const result = await this.doRequest({
            path: `/bucket/${bucketID}`,
            method: "PUT",
            body: bucketObj,
        });
        return result;
    }
    /**
     * Deletes a bucket from the account
     * @param bucketID Bucket ID
     */
    async delete(bucketID) {
        const result = await this.doRequest({
            path: `/bucket/${bucketID}`,
            method: "DELETE",
        });
        return result;
    }
    /**
     * Gets information about the bucket
     * @param bucketID Bucket ID
     */
    async info(bucketID) {
        let result = await this.doRequest({
            path: `/bucket/${bucketID}`,
            method: "GET",
        });
        result = dateParser_1.default(result, ["created_at", "updated_at"]);
        return result;
    }
    /**
     * Get Amount of data on the Bucket
     * @param bucketID Bucket ID
     */
    async amount(bucketID) {
        const result = await this.doRequest({
            path: `/bucket/${bucketID}/data_amount`,
            method: "GET",
        });
        return result;
    }
    /**
     * List variables inside the bucket
     * @default
     * ```json
     * optionsObj: {
     *   showAmount: false
     *   showDeleted: false
     *   resolveOriginName: false
     * }
     * ```
     * @param bucketID Bucket ID
     * @param optionsObj Request options
     */
    async listVariables(bucketID, optionsObj) {
        const result = await this.doRequest({
            path: `/bucket/${bucketID}/variable`,
            method: "GET",
            params: {
                amount: (optionsObj === null || optionsObj === void 0 ? void 0 : optionsObj.showAmount) || false,
                deleted: (optionsObj === null || optionsObj === void 0 ? void 0 : optionsObj.showDeleted) || false,
                resolveOriginName: (optionsObj === null || optionsObj === void 0 ? void 0 : optionsObj.resolveOriginName) || false,
            },
        });
        return result;
    }
    /**
     * Delete a bucket variable
     * @param bucketID Bucket ID
     * @param deleteParams Variable Details
     */
    async deleteVariable(bucketID, deleteParams) {
        const result = await this.doRequest({
            path: `/bucket/${bucketID}/variable`,
            method: "DELETE",
            body: deleteParams || {},
        });
        return result;
    }
    /**
     * Get all device associated with bucket
     * @param bucketID Bucket ID
     */
    async getDevicesAssociated(bucketID) {
        const result = await this.doRequest({
            path: `/bucket/${bucketID}/device`,
            method: "GET",
        });
        return result;
    }
    /**
     * Export Data from Bucket
     * @param buckets Array of JSON with get details
     * @param output Type of output
     * @param optionsObj Options of request
     */
    async exportData(buckets, output, optionsObj) {
        const result = await this.doRequest({
            path: `/data/export?output=${output}`,
            method: "POST",
            body: Object.assign({ buckets }, optionsObj),
        });
        return result;
    }
}
exports.default = Buckets;
//# sourceMappingURL=Buckets.js.map