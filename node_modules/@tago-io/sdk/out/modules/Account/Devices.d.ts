import { GenericID, GenericToken, TokenCreateResponse, TokenData } from "../../common/common.types";
import TagoIOModule, { GenericModuleParams } from "../../common/TagoIOModule";
import { ConfigurationParams, DeviceCreateInfo, DeviceCreateResponse, DeviceInfo, DeviceQuery, DeviceListItem, DeviceTokenDataList, ListDeviceTokenQuery } from "./devices.types";
declare class Devices extends TagoIOModule<GenericModuleParams> {
    /**
     * Retrieves a list with all devices from the account
     * @default
     * queryObj: {
     *   page: 1,
     *   fields: ["id", "name"],
     *   filter: {},
     *   amount: 20,
     *   orderBy: "name,asc",
     *   resolveBucketName: false
     * }
     * @param queryObj Search query params
     */
    list(queryObj?: DeviceQuery): Promise<DeviceListItem[]>;
    /**
     * Generates and retrieves a new action from the Device
     * @param deviceObj Object data to create new device
     */
    create(deviceObj: DeviceCreateInfo): Promise<DeviceCreateResponse>;
    /**
     * Modify any property of the device
     * @param deviceID Device ID
     * @param deviceObj Device object with fields to replace
     */
    edit(deviceID: GenericID, deviceObj: Partial<DeviceInfo>): Promise<string>;
    /**
     * Deletes an device from the account
     * @param deviceID Device ID
     */
    delete(deviceID: GenericID): Promise<string>;
    /**
     * Get Info of the Device
     * @param deviceID Device ID
     */
    info(deviceID: GenericID): Promise<DeviceInfo>;
    /**
     * Create or edit param for the Device
     * @param deviceID Device ID
     * @param configObj Configuration Data
     * @param paramID Parameter ID
     */
    paramSet(deviceID: GenericID, configObj: Partial<ConfigurationParams>, paramID?: GenericID): Promise<string>;
    /**
     * List Params for the Device
     * @param deviceID Device ID
     * @param sentStatus True return only sent=true, False return only sent=false
     */
    paramList(deviceID: GenericID, sentStatus?: Boolean): Promise<ConfigurationParams[]>;
    /**
     * Remove param for the Device
     * @param deviceID Device ID
     * @param paramID Parameter ID
     */
    paramRemove(deviceID: GenericID, paramID: GenericID): Promise<string>;
    /**
     * Retrieves a list of all tokens
     * @default
     * queryObj: {
     *   page: 1,
     *   fields: ["name", "token", "permission"],
     *   filter: {},
     *   amount: 20,
     *   orderBy: "created_at,desc",
     * }
     * @param deviceID Device ID
     * @param queryObj Search query params
     */
    tokenList(deviceID: GenericID, queryObj?: ListDeviceTokenQuery): Promise<Partial<DeviceTokenDataList>[]>;
    /**
     * Generates and retrieves a new token
     * @param deviceID Device ID
     * @param tokenParams Params for new token
     */
    tokenCreate(deviceID: GenericID, tokenParams: TokenData): Promise<TokenCreateResponse>;
    /**
     * Delete a token
     * @param token Token
     */
    tokenDelete(token: GenericToken): Promise<string>;
}
export default Devices;
//# sourceMappingURL=Devices.d.ts.map