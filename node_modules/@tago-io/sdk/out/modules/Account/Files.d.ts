/// <reference types="node" />
import { GenericID } from "../../common/common.types";
import TagoIOModule, { GenericModuleParams } from "../../common/TagoIOModule";
import { Base64File, CopyFiles, FileListInfo, FileQuery, FilesPermission, MoveFiles, Options } from "./files.types";
declare class Files extends TagoIOModule<GenericModuleParams> {
    /**
     * list of files in account
     * @param queryObj Object with path, pagination and quantity
     */
    list(queryObj?: FileQuery): Promise<FileListInfo>;
    /**
     * Upload an array of files(Base64) to TagoIO
     * The filename parameter is also full path
     * @param fileList Array of files data to be uploaded
     * @example
     * ```json
     * fileList: [
     *   {
     *     filename: "/myfiles/myfile.ext",
     *     file: "StringWithBase64"
     *   }
     * ]
     * ```
     */
    uploadBase64(fileList: Base64File[]): Promise<string>;
    /**
     * Move/Rename Files
     * @param fileList Array move actions to be made
     * @example
     * ```json
     * fileList: [
     *   {
     *     from: "/myfiles/myOldName.ext",
     *     to: "/myfiles/newFolder/andNewName.ext"
     *   }
     * ]
     * ```
     */
    move(fileList: MoveFiles[]): Promise<string>;
    /**
     * Copy Files
     * @param fileList Array of copy actions to be made
     * @example
     * ```json
     * fileList: [
     *   {
     *     from: "/myfiles/myOldName.ext",
     *     to: "/myfiles/newFolder/andNewName.ext"
     *   }
     * ]
     * ```
     */
    copy(fileList: CopyFiles[]): Promise<string>;
    /**
     * Delete Folder or Files
     * @param files An array of files or folders to be deleted
     */
    delete(files: string[]): Promise<string>;
    /**
     * Check if file is private or public
     * @param file Path of file
     */
    checkPermission(file: string): Promise<{
        public: boolean;
    }>;
    /**
     * Change visibility from files
     * @param filesVisibility An Array with files and their visibility to be setted
     */
    changePermission(filesVisibility: FilesPermission[]): Promise<string>;
    private getPathFromUrl;
    /**
     * Get a file url with authenticate token valid for 120 seconds
     * @param url Full TagoIO File url
     */
    getFileURLSigned(url: string): Promise<string>;
    /**
     * Get file md5 with authenticate token for privates files
     * @param url Full TagoIO File url
     */
    getFileMD5(url: string): Promise<string>;
    /**
     * Creates a multipart upload instance
     * @param filename the path + filename for the file
     * @param options the upload options for this file
     */
    private createMultipartUpload;
    /**
     * Uploads a single part to TagoIO
     * @param filename the path + filename for the file
     * @param uploadID the upload ID acquired by the 'createMultipartUpload' function call
     * @param partNumber the sequential part number for the upload. This should be 1 in the first call, then 2 in the second call, so on and so forth
     * @param blob the portion of the file to be uploaded
     * @param options the upload options for this file
     */
    _uploadPart(filename: string, uploadID: string, partNumber: number, blob: Buffer | Blob, options?: Options): Promise<{
        ETag: string;
        PartNumber: number;
    }>;
    /**
     * Adds an upload to the queue.
     * It will try to upload for 'opts.maxTriesForEachChunk' and fail
     * if it couldn't upload after those many tries.
     * @param filename the path + filename for the file
     * @param uploadID the upload ID acquired by the 'createMultipartUpload' function call
     * @param partNumberthe sequential part number for the upload. This should be 1 in the first call, then 2 in the second call, so on and so forth
     * @param blob the portion of the file to be uploaded
     * @param options see the uploadFile function
     */
    _addToQueue(filename: string, uploadID: GenericID, partNumber: number, blob: Buffer | Blob, options?: Options): Promise<{
        ETag: string;
        PartNumber: number;
    }>;
    /**
     * Finishes a multipart upload instance
     * @param filename the path + filename for the file
     * @param uploadID the upload ID acquired by the 'createMultipartUpload' function call
     * @param parts all the parts uploaded to the file
     * @param options the upload options for this file
     */
    _completeMultipartUpload(filename: string, uploadID: string, parts: {
        ETag: String;
        PartNumber: number;
    }[], options?: Options): Promise<{
        file: string;
    }>;
    /**
     * Uploads a single file to TagoIO.
     * The upload is multipart, meaning that the file will be divided and sent in chunks, resulting in multiple requests being made.
     *
     * @param file the file to be uploaded
     * @param filename the path + filename for the file
     * @param options the upload options for this file
     */
    uploadFile(file: Buffer | Blob, filename: string, options?: Options): Promise<{
        file: string;
    }>;
    /**
     * Throw a error if is cancelled
     * @param cancelled
     */
    private isCanceled;
}
export default Files;
//# sourceMappingURL=Files.d.ts.map