"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const TagoIOModule_1 = __importDefault(require("../../common/TagoIOModule"));
const Dashboard_Widgets_1 = __importDefault(require("./Dashboard.Widgets"));
const _Share_1 = __importDefault(require("./_Share"));
const dateParser_1 = __importDefault(require("../Utils/dateParser"));
class Dashboards extends TagoIOModule_1.default {
    constructor() {
        super(...arguments);
        this.share = new _Share_1.default(Object.assign(Object.assign({}, this.params), { type: "dashboard" }));
        this.widgets = new Dashboard_Widgets_1.default(this.params);
    }
    /**
     * Retrieves a list with all dashboards from the account
     * @default
     * ```json
     * queryObj: {
     *   page: 1,
     *   fields: ["id", "name"],
     *   filter: {},
     *   amount: 20,
     *   orderBy: "label,asc",
     * }
     * ```
     * @param queryObj Search query params
     */
    async list(queryObj) {
        let result = await this.doRequest({
            path: "/dashboard",
            method: "GET",
            params: {
                page: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.page) || 1,
                fields: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.fields) || ["id", "name"],
                filter: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.filter) || {},
                amount: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.amount) || 20,
                orderBy: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.orderBy) ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : "label,asc",
            },
        });
        result = result.map((data) => dateParser_1.default(data, ["created_at", "updated_at", "last_access"]));
        return result;
    }
    /**
     * Generates and retrieves a new dashboard from the account
     * @param dashboardObj Object data to create new Dashboard
     */
    async create(dashboardObj) {
        const result = await this.doRequest({
            path: "/dashboard",
            method: "POST",
            body: Object.assign({}, dashboardObj),
        });
        return result;
    }
    /**
     * Modify any property of the action
     * @param dashboardID Dashboard identification
     * @param dashboardObj Dashboard Object with data to be replaced
     */
    async edit(dashboardID, dashboardObj) {
        const result = await this.doRequest({
            path: `/dashboard/${dashboardID}`,
            method: "PUT",
            body: Object.assign({}, dashboardObj),
        });
        return result;
    }
    /**
     * Deletes an dashboard from the account
     * @param dashboardID Dashboard identification
     */
    async delete(dashboardID) {
        const result = await this.doRequest({
            path: `/dashboard/${dashboardID}`,
            method: "DELETE",
        });
        return result;
    }
    /**
     * Gets information about the dashboard
     * @param dashboardID Dashboard identification
     */
    async info(dashboardID) {
        let result = await this.doRequest({
            path: `/dashboard/${dashboardID}`,
            method: "GET",
        });
        result = dateParser_1.default(result, ["created_at", "updated_at", "last_access"]);
        return result;
    }
    /**
     * Duplicate the dashboard to your own account
     * @param dashboardID Dashboard identification
     * @param dashboardObj Object with data of the duplicate dashboard
     */
    async duplicate(dashboardID, dashboardObj) {
        const result = await this.doRequest({
            path: `/dashboard/${dashboardID}/duplicate`,
            method: "POST",
            body: dashboardObj || {},
        });
        return result;
    }
    /**
     * Get share list of the dashboard
     * @param dashboardID Dashboard identification
     */
    async shareList(dashboardID) {
        return this.share.list(dashboardID);
    }
    /**
     * Share the dashboard with another person
     * @param dashboardID Dashboard identification
     * @param inviteObj Object with target and message
     */
    async shareSendInvite(dashboardID, inviteObj) {
        return this.share.invite(dashboardID, inviteObj);
    }
    /**
     * Change permissions of the bucket
     * @param shareID Share identification
     * @param targetObj Object with target email and new permission
     */
    async shareEdit(shareID, targetObj) {
        return this.share.edit(shareID, targetObj);
    }
    /**
     * Remove share of the bucket
     * @param shareID Share identification
     */
    async shareDelete(shareID) {
        return this.share.remove(shareID);
    }
    /**
     * Generate a new public token for the dashboard
     * @param dashboardID Dashboard identification
     * @param expireTime Time when token will expire
     */
    async getPublicKey(dashboardID, expireTime = "never") {
        let result = await this.doRequest({
            path: `/dashboard/${dashboardID}/share/public`,
            method: "GET",
            params: {
                expire_time: expireTime,
            },
        });
        result = dateParser_1.default(result, ["expire_time"]);
        return result;
    }
    /**
     * Get list of devices related with dashboard
     * @param dashboardID Dashboard identification
     */
    async listDevicesRelated(dashboardID) {
        const result = await this.doRequest({
            path: `/dashboard/${dashboardID}/devices`,
            method: "GET",
        });
        return result;
    }
    /**
     * Get list of analysis related with a dashboard
     * @param dashboardID Dashboard identification
     */
    async listAnalysisRelated(dashboardID) {
        const result = await this.doRequest({
            path: `/dashboard/${dashboardID}/analysis`,
            method: "GET",
        });
        return result;
    }
    /**
     * Runs an analysis located in a widget's header button
     * @param analysisID The id of the analysis to run
     * @param dashboardID The id of the dashboard that contains the widget
     * @param widgetID The id of the widget that contains the header button
     * @param scope Data to send to the analysis
     */
    async runWidgetHeaderButtonAnalysis(analysisID, dashboardID, widgetID, scope) {
        const result = await this.doRequest({
            path: `/analysis/${analysisID}/run/${dashboardID}/${widgetID}`,
            method: "POST",
            body: {
                scope,
            },
        });
        return result;
    }
}
exports.default = Dashboards;
//# sourceMappingURL=Dashboards.js.map