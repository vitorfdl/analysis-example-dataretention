import { GenericID, GenericToken } from "../../common/common.types";
import TagoIOModule, { GenericModuleParams } from "../../common/TagoIOModule";
import { AnalysisCreateInfo, AnalysisInfo, AnalysisQuery, ScriptFile } from "./analysis.types";
declare class Analyses extends TagoIOModule<GenericModuleParams> {
    /**
     * Retrieves a list with all analyses from the account
     * @default
     * ```json
     * queryObj: {
     *   page: 1,
     *   fields: ["id", "name"],
     *   filter: {},
     *   amount: 20,
     *   orderBy: "name,asc",
     * }
     * ```json
     * @param queryObj Search query params
     */
    list(queryObj?: AnalysisQuery): Promise<AnalysisInfo[]>;
    /**
     * Create a new analyze
     * @param analysisObj data object to create new TagoIO Analyze
     */
    create(analysisObj: AnalysisCreateInfo): Promise<{
        id: GenericID;
        token: GenericToken;
    }>;
    /**
     * Modify any property of the analyze.
     * @param analysisID Analyze identification
     * @param analysisObj Analyze Object with data to replace
     */
    edit(analysisID: GenericID, analysisObj: Partial<AnalysisInfo>): Promise<string>;
    /**
     * Deletes an analyze from the account
     * @param analysisID Analyze identification
     */
    delete(analysisID: GenericID): Promise<string>;
    /**
     * Gets information about the analyze
     * @param analysisID Analyze identification
     */
    info(analysisID: GenericID): Promise<AnalysisInfo>;
    /**
     * Force analyze to run
     * @param analysisID Analyze identification
     * @param scopeObj simulate scope for analysis
     */
    run(analysisID: GenericID, scopeObj?: Object | any): Promise<{
        analysis_token: GenericToken;
    }>;
    /**
     * Generate a new token for the analysis
     * @param analysisID Analyze identification
     */
    tokenGenerate(analysisID: GenericID): Promise<string>;
    /**
     * Upload a file (base64) to Analysis. Automatically erase the old one
     * @param analysisID Analyze identification
     * @param fileObj Object with name, language and content of the file
     */
    uploadScript(analysisID: GenericID, fileObj: ScriptFile): Promise<string>;
    /**
     * Get a url to download the analysis.
     * If `version` is specified in `options`, downloads a specific version.
     *
     * @param analysisID Analysis identification
     * @param options Options for the Analysis script to download
     */
    downloadScript(analysisID: GenericID, options?: {
        version?: number;
    }): Promise<{
        url: string;
        size_unit: string;
        size: number;
        expire_at: Date;
    }>;
}
export default Analyses;
//# sourceMappingURL=Analyses.d.ts.map