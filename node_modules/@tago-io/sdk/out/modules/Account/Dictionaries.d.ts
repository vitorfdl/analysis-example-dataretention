import { GenericID } from "../../common/common.types";
import TagoIOModule, { GenericModuleParams } from "../../common/TagoIOModule";
import { DictionaryCreateInfo, DictionaryInfo, DictionaryQuery, LanguageData, LanguageEditData, LanguageInfoQuery } from "./dictionaries.types";
declare class Dictionaries extends TagoIOModule<GenericModuleParams> {
    /**
     * Retrieve a list with all dictionaries from an account.
     *
     * @default
     * ```json
     * queryObj: {
     *   page: 1,
     *   fields: ["id", "name", "slug", "languages"],
     *   filter: {},
     *   amount: 20,
     *   orderBy: "name,asc",
     * }
     * ```
     *
     * @param queryObj Search query params.
     */
    list(queryObj?: DictionaryQuery): Promise<DictionaryInfo[]>;
    /**
     * Generate a new dictionary for the account.
     *
     * @param dictionaryObj Object with data to create new dictionary.
     */
    create(dictionaryObj: DictionaryCreateInfo): Promise<{
        dictionary: string;
    }>;
    /**
     * Modify any property of a dictionary.
     *
     * @param dictionaryID Dictionary ID.
     * @param dictionaryObj Dictionary Object data to be replaced.
     */
    edit(dictionaryID: GenericID, dictionaryObj: Partial<DictionaryCreateInfo>): Promise<string>;
    /**
     * Delete a dictionary from the account.
     *
     * @param dictionaryID Dictionary ID.
     */
    delete(dictionaryID: GenericID): Promise<string>;
    /**
     * Get information about a dictionary.
     *
     * @param dictionaryID Dictionary ID.
     */
    info(dictionaryID: GenericID): Promise<DictionaryInfo>;
    languageEdit(dictionaryID: GenericID, locale: string, languageObj: LanguageEditData): Promise<string>;
    /**
     * Delete a language from a dictionary.
     *
     * @param dictionaryID Dictionary ID.
     * @param locale Language locale string (e.g. `en-US`).
     */
    languageDelete(dictionaryID: GenericID, locale: string): Promise<string>;
    /**
     * Get information about a dictionary by ID.
     *
     * @param dictionaryID Dictionary ID.
     * @param locale Language locale string (e.g. `en-US`).
     * @param queryObj Language info query params.
     */
    languageInfo(dictionaryID: GenericID, locale: string, queryObj?: LanguageInfoQuery): Promise<LanguageData>;
    /**
     * Get information about a dictionary querying by slug instead of the dictionary's ID.
     *
     * @param slug Dictionary slug.
     * @param locale Language locale string (e.g. `en-US`).
     * @param queryObj Language info query params.
     */
    languageInfoBySlug(slug: string, locale: string, queryObj?: LanguageInfoQuery): Promise<LanguageData>;
}
export default Dictionaries;
//# sourceMappingURL=Dictionaries.d.ts.map