"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const TagoIOModule_1 = __importDefault(require("../../common/TagoIOModule"));
const dateParser_1 = __importDefault(require("../Utils/dateParser"));
class Connectors extends TagoIOModule_1.default {
    /**
     * Retrieves a list with all connectors from account
     * @default
     * ```json
     * queryObj: {
     *   page: 1,
     *   fields: ["id", "name"],
     *   filter: {},
     *   amount: 20,
     *   orderBy: "name,asc",
     * }
     * ```
     * @param queryObj Search query params
     */
    async list(queryObj) {
        let result = await this.doRequest({
            path: "/integration/connector/",
            method: "GET",
            params: {
                page: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.page) || 1,
                fields: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.fields) || ["id", "name"],
                filter: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.filter) || {},
                amount: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.amount) || 20,
                orderBy: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.orderBy) ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : "name,asc",
            },
        });
        result = result.map((data) => dateParser_1.default(data, ["created_at", "updated_at"]));
        return result;
    }
    /**
     * Get Info of the Connector
     * @param connectorID Connector identification
     * @param fields Fields to fetch.
     */
    async info(connectorID, fields) {
        let result = await this.doRequest({
            path: `/integration/connector/${connectorID}`,
            method: "GET",
            params: {
                fields,
            },
        });
        result = dateParser_1.default(result, ["created_at", "updated_at"]);
        return result;
    }
    /**
     * Generates and retrieves a new connector from the account
     * @param connectorObj Object data to create new Connector
     */
    async create(connectorObj) {
        const result = await this.doRequest({
            path: `/integration/connector/`,
            method: "POST",
            body: Object.assign({}, connectorObj),
        });
        return result;
    }
    /**
     * Modify any property of the connector
     * @param connectorID Connector identification
     * @param connectorObj Object data to create new Connector
     */
    async edit(connectorID, connectorObj) {
        const result = await this.doRequest({
            path: `/integration/connector/${connectorID}`,
            method: "PUT",
            body: Object.assign({}, connectorObj),
        });
        return result;
    }
}
exports.default = Connectors;
//# sourceMappingURL=Integration.Connectors.js.map