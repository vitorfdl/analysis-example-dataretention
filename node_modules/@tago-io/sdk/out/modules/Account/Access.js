"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const TagoIOModule_1 = __importDefault(require("../../common/TagoIOModule"));
const dateParser_1 = __importDefault(require("../Utils/dateParser"));
class Access extends TagoIOModule_1.default {
    /**
     * Retrieves a list with all Access rules from account
     * @default
     * ```json
     * queryObj: {
     *   page: 1,
     *   fields: ["id", "name", "tags"],
     *   filter: {},
     *   amount: 20,
     *   orderBy: "name,asc",
     * }
     * ```
     * @param queryObj Search query params
     */
    async list(queryObj) {
        let result = await this.doRequest({
            path: "/am",
            method: "GET",
            params: {
                page: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.page) || 1,
                fields: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.fields) || ["id", "name", "tags"],
                filter: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.filter) || {},
                amount: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.amount) || 20,
                orderBy: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.orderBy) ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : "name,asc",
            },
        });
        result = result.map((data) => dateParser_1.default(data, ["created_at", "updated_at"]));
        return result;
    }
    /**
     * Create a new access policy
     * @param accessObj
     */
    async create(accessObj) {
        const result = await this.doRequest({
            path: "/am",
            method: "POST",
            body: Object.assign({}, accessObj),
        });
        return result;
    }
    /**
     * Edit access policy
     * @param accessID Access policy identification
     * @param accessObj Access policy info to change
     */
    async edit(accessID, accessObj) {
        const result = await this.doRequest({
            path: `/am/${accessID}`,
            method: "PUT",
            body: Object.assign({}, accessObj),
        });
        return result;
    }
    /**
     * Delete account policy
     * @param accessID Access policy identification
     */
    async delete(accessID) {
        const result = await this.doRequest({
            path: `/am/${accessID}`,
            method: "DELETE",
        });
        return result;
    }
    /**
     * Get account policy info
     * @param accessID Access policy identification
     */
    async info(accessID) {
        let result = await this.doRequest({
            path: `/am/${accessID}`,
            method: "GET",
        });
        result = dateParser_1.default(result, ["created_at", "updated_at"]);
        return result;
    }
}
exports.default = Access;
//# sourceMappingURL=Access.js.map