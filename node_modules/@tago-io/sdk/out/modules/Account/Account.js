"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const BatchRequest_1 = __importDefault(require("../../common/BatchRequest"));
const TagoIOModule_1 = __importDefault(require("../../common/TagoIOModule"));
const Access_1 = __importDefault(require("./Access"));
const Actions_1 = __importDefault(require("./Actions"));
const Analyses_1 = __importDefault(require("./Analyses"));
const Buckets_1 = __importDefault(require("./Buckets"));
const Dashboards_1 = __importDefault(require("./Dashboards"));
const Devices_1 = __importDefault(require("./Devices"));
const Dictionaries_1 = __importDefault(require("./Dictionaries"));
const Explore_1 = __importDefault(require("./Explore"));
const Files_1 = __importDefault(require("./Files"));
const Notifications_1 = __importDefault(require("./Notifications"));
const PaymentHistory_1 = __importDefault(require("./PaymentHistory"));
const PaymentMethods_1 = __importDefault(require("./PaymentMethods"));
const Plan_1 = __importDefault(require("./Plan"));
const Profile_1 = __importDefault(require("./Profile"));
const Run_1 = __importDefault(require("./Run"));
const ServiceAuthorization_1 = __importDefault(require("./ServiceAuthorization"));
const Tags_1 = __importDefault(require("./Tags"));
const Template_1 = __importDefault(require("./Template"));
const Integration_1 = __importDefault(require("./Integration"));
const dateParser_1 = __importDefault(require("../Utils/dateParser"));
/**
 * To set up an account object, you need a token that you need to get from our
 * admin website and the region. Make sure to use tokens with the correct
 * write/read privileges for the current function that you want to use.
 *
 * @class Account
 * @extends {TagoIOModule<GenericModuleParams>}
 */
class Account extends TagoIOModule_1.default {
    constructor() {
        super(...arguments);
        /**
         * Send a batch commands
         */
        this.batch = new BatchRequest_1.default(this.params);
        /**
         * Manage actions in account.
         * Be sure to use an account token with “write” permissions when
         * using functions like create, edit and delete.
         */
        this.actions = new Actions_1.default(this.params);
        /**
         * Manage analysis in account
         * Be sure to use an account token with “write” permissions when using
         * functions like create, edit and delete.
         */
        this.analysis = new Analyses_1.default(this.params);
        /**
         * Manage buckets in account
         * Be sure to use an account token with “write” permissions when using
         * functions like create, edit and delete.
         */
        this.buckets = new Buckets_1.default(this.params);
        /**
         * Manage files in account
         * Be sure to use an account token with “write” permissions when using
         * functions like create, edit and delete.
         */
        this.files = new Files_1.default(this.params);
        /**
         * Manage dashboards in account
         * Be sure to use an account token with “write” permissions when using
         * functions like create, edit and delete.
         */
        this.dashboards = new Dashboards_1.default(this.params);
        /**
         * Manage devices in account
         * Be sure to use an account token with “write” permissions when using
         * functions like create, edit and delete.
         */
        this.devices = new Devices_1.default(this.params);
        /**
         * Manage dictionaries in account
         * Be sure to use an account token with “write” permissions when using
         * functions like create, edit and delete.
         */
        this.dictionaries = new Dictionaries_1.default(this.params);
        /**
         * Manage notifications in account
         * Be sure to use an account token with “write” permissions when using
         * functions like create, edit and delete.
         */
        this.notifications = new Notifications_1.default(this.params);
        /**
         * Manage tags in account
         * Be sure to use an account token with “write” permissions when using
         * functions like create, edit and delete.
         */
        this.tags = new Tags_1.default(this.params);
        /**
         * Manage payment methods in account
         * Be sure to use an account token with “write” permissions when using
         * functions like create, edit and delete.
         */
        this.paymentMethods = new PaymentMethods_1.default(this.params);
        /**
         * Manage account plans
         * Be sure to use an account token with “write” permissions when using
         * functions like create, edit and delete.
         */
        this.plan = new Plan_1.default(this.params);
        /**
         * Manage payment history in account
         * Be sure to use an account token with “write” permissions when using
         * functions like create, edit and delete.
         */
        this.paymentHistory = new PaymentHistory_1.default(this.params);
        /**
         * Manage explore in account
         * Be sure to use an account token with “write” permissions when using
         * functions like create, edit and delete.
         */
        this.explore = new Explore_1.default(this.params);
        /**
         * Manage connectors in account
         * Be sure to use an account token with “write” permissions when using
         * functions like create, edit and delete.
         */
        this.integration = new Integration_1.default(this.params);
        /**
         * Manage templates in account
         * Be sure to use an account token with “write” permissions when using
         * functions like create, edit and delete.
         */
        this.template = new Template_1.default(this.params);
        /**
         * Manage access in account
         * Be sure to use an account token with “write” permissions when using
         * functions like create, edit and delete.
         */
        this.accessManagement = new Access_1.default(this.params);
        /**
         * Manage run apps in account
         * Be sure to use an account token with “write” permissions when using
         * functions like create, edit and delete.
         *
         */
        this.run = new Run_1.default(this.params);
        /**
         * Manage services in account
         * Be sure to use an account token with “write” permissions when using
         * functions like create, edit and delete.
         */
        this.ServiceAuthorization = new ServiceAuthorization_1.default(this.params);
        /**
         * Manage profiles in account
         * Be sure to use an account token with “write” permissions when using
         * functions like create, edit and delete.
         */
        this.profiles = new Profile_1.default(this.params);
    }
    /**
     * Gets all account information
     */
    async info() {
        let result = await this.doRequest({
            path: "/account",
            method: "GET",
        });
        result = dateParser_1.default(result, ["created_at", "updated_at", "last_login"]);
        if (result.options)
            result.options = dateParser_1.default(result.options, ["last_whats_new"]);
        return result;
    }
    /**
     * Edit account
     * @param accountObj Account data to edit
     */
    async edit(accountObj) {
        const result = await this.doRequest({
            path: "/account",
            method: "PUT",
            body: accountObj,
        });
        return result;
    }
    /**
     * Delete account
     */
    async delete() {
        const result = await this.doRequest({
            path: "/account",
            method: "DELETE",
        });
        return result;
    }
    /**
     * Generates and retrieves a new token for the account
     * @param tokenParams Token data
     * @param region TagoIO Region Server [default usa-1]
     */
    static async tokenCreate(tokenParams, region) {
        const params = {
            path: "/account/profile/token",
            method: "POST",
            body: tokenParams,
        };
        const result = await TagoIOModule_1.default.doRequestAnonymous(params, region);
        return result;
    }
    /**
     * Retrieve list of profiles for login and do Login
     * @param credentials Credentials
     * @param region TagoIO Region Server [default usa-1]
     */
    static async login(credentials, region) {
        const params = {
            path: "/account/login",
            method: "POST",
            body: credentials,
        };
        const result = await TagoIOModule_1.default.doRequestAnonymous(params, region);
        return result;
    }
    /**
     * Send password recover email
     * @param email E-mail to recovery
     * @param region TagoIO Region Server [default usa-1]
     */
    static async passwordRecover(email, region) {
        const params = {
            path: `/account/passwordreset/${email}`,
            method: "GET",
        };
        const result = await TagoIOModule_1.default.doRequestAnonymous(params, region);
        return result;
    }
    /**
     * Change account password
     * @param password New Password
     */
    async passwordChange(password) {
        const result = await this.doRequest({
            path: `/account/passwordreset`,
            method: "POST",
            body: {
                password,
            },
        });
        return result;
    }
    /**
     * Create new TagoIO account
     * @param createParams New account details
     * @param region TagoIO Region Server [default usa-1]
     */
    static async create(createParams, region) {
        const params = {
            path: `/account`,
            method: "POST",
            body: createParams,
        };
        const result = await TagoIOModule_1.default.doRequestAnonymous(params, region);
        return result;
    }
    /**
     *  Re-send confirmation account email
     * @param email E-mail address
     * @param region TagoIO Region Server [default usa-1]
     */
    static async resendConfirmation(email, region) {
        const params = {
            path: `/account/resend_confirmation/${email}`,
            method: "GET",
        };
        const result = await TagoIOModule_1.default.doRequestAnonymous(params, region);
        return result;
    }
    /**
     * Confirm account creation
     * @param token Confirmation token
     * @param region TagoIO Region Server [default usa-1]
     */
    static async confirmAccount(token, region) {
        const params = {
            path: `/account/confirm/${token}`,
            method: "GET",
        };
        const result = await TagoIOModule_1.default.doRequestAnonymous(params, region);
        return result;
    }
    /**
     * Request the PIN Code for a given OTP Type.
     * @param credentials Credentials
     * @param typeOTP authenticator, sms or email
     */
    static async requestLoginPINCode(credentials, typeOTP, region) {
        const params = {
            path: `/account/login/otp`,
            method: "POST",
            body: Object.assign(Object.assign({}, credentials), { otp_type: typeOTP }),
        };
        const result = await TagoIOModule_1.default.doRequestAnonymous(params, region);
        return result;
    }
    /**
     * Enable OTP for a given OTP Type.
     * You will be requested to confirm the operation with a pin code.
     * @param credentials Credentials
     * @param typeOTP authenticator, sms or email
     */
    async enableOTP(credentials, typeOTP) {
        const result = await this.doRequest({
            path: `/account/otp/${typeOTP}/enable`,
            method: "POST",
            body: credentials,
        });
        return result;
    }
    /**
     * Enable OTP for a given OTP Type
     * @param credentials Credentials
     * @param typeOTP authenticator, sms or email
     */
    async disableOTP(credentials, typeOTP) {
        const result = await this.doRequest({
            path: `/account/otp/${typeOTP}/disable`,
            method: "POST",
            body: credentials,
        });
        return result;
    }
    /**
     * Confirm OTP enabling proccses for a given OTP Type
     * @param credentials Credentials
     * @param typeOTP authenticator, sms or email
     */
    async confirmOTP(pinCode, typeOTP) {
        const result = await this.doRequest({
            path: `/account/otp/${typeOTP}/confirm`,
            method: "POST",
            body: {
                pin_code: pinCode,
            },
        });
        return result;
    }
}
exports.default = Account;
//# sourceMappingURL=Account.js.map