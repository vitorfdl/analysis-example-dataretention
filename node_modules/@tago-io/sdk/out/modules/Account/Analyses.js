"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const TagoIOModule_1 = __importDefault(require("../../common/TagoIOModule"));
const dateParser_1 = __importDefault(require("../Utils/dateParser"));
class Analyses extends TagoIOModule_1.default {
    /**
     * Retrieves a list with all analyses from the account
     * @default
     * ```json
     * queryObj: {
     *   page: 1,
     *   fields: ["id", "name"],
     *   filter: {},
     *   amount: 20,
     *   orderBy: "name,asc",
     * }
     * ```json
     * @param queryObj Search query params
     */
    async list(queryObj) {
        let result = await this.doRequest({
            path: "/analysis/",
            method: "GET",
            params: {
                page: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.page) || 1,
                fields: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.fields) || ["id", "name"],
                filter: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.filter) || {},
                amount: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.amount) || 20,
                orderBy: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.orderBy) ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : "name,asc",
            },
        });
        result = result.map((data) => dateParser_1.default(data, ["created_at", "updated_at", "last_run"]));
        return result;
    }
    /**
     * Create a new analyze
     * @param analysisObj data object to create new TagoIO Analyze
     */
    async create(analysisObj) {
        const result = await this.doRequest({
            path: `/analysis`,
            method: "POST",
            body: Object.assign({}, analysisObj),
        });
        return result;
    }
    /**
     * Modify any property of the analyze.
     * @param analysisID Analyze identification
     * @param analysisObj Analyze Object with data to replace
     */
    async edit(analysisID, analysisObj) {
        const result = await this.doRequest({
            path: `/analysis/${analysisID}`,
            method: "PUT",
            body: Object.assign({}, analysisObj),
        });
        return result;
    }
    /**
     * Deletes an analyze from the account
     * @param analysisID Analyze identification
     */
    async delete(analysisID) {
        const result = await this.doRequest({
            path: `/analysis/${analysisID}`,
            method: "DELETE",
        });
        return result;
    }
    /**
     * Gets information about the analyze
     * @param analysisID Analyze identification
     */
    async info(analysisID) {
        let result = await this.doRequest({
            path: `/analysis/${analysisID}`,
            method: "GET",
        });
        result = dateParser_1.default(result, ["created_at", "updated_at", "last_run"]);
        return result;
    }
    /**
     * Force analyze to run
     * @param analysisID Analyze identification
     * @param scopeObj simulate scope for analysis
     */
    async run(analysisID, scopeObj) {
        const result = await this.doRequest({
            path: `/analysis/${analysisID}/run`,
            method: "POST",
            body: {
                scope: scopeObj,
            },
        });
        return result;
    }
    /**
     * Generate a new token for the analysis
     * @param analysisID Analyze identification
     */
    async tokenGenerate(analysisID) {
        const result = await this.doRequest({
            path: `/analysis/${analysisID}/token`,
            method: "GET",
        });
        return result;
    }
    /**
     * Upload a file (base64) to Analysis. Automatically erase the old one
     * @param analysisID Analyze identification
     * @param fileObj Object with name, language and content of the file
     */
    async uploadScript(analysisID, fileObj) {
        const result = await this.doRequest({
            path: `/analysis/${analysisID}/upload`,
            method: "POST",
            body: {
                file: fileObj.content,
                file_name: fileObj.name,
                language: fileObj.language,
            },
        });
        return result;
    }
    /**
     * Get a url to download the analysis.
     * If `version` is specified in `options`, downloads a specific version.
     *
     * @param analysisID Analysis identification
     * @param options Options for the Analysis script to download
     */
    async downloadScript(analysisID, options) {
        const { version } = options || {};
        let result = await this.doRequest({
            path: `/analysis/${analysisID}/download`,
            method: "GET",
            params: Object.assign({}, (version && { version })),
        });
        result = dateParser_1.default(result, ["expire_at"]);
        return result;
    }
}
exports.default = Analyses;
//# sourceMappingURL=Analyses.js.map