"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const TagoIOModule_1 = __importDefault(require("../../common/TagoIOModule"));
const dateParser_1 = __importDefault(require("../Utils/dateParser"));
const modules_1 = require("../../modules");
class Dictionaries extends TagoIOModule_1.default {
    /**
     * Retrieve a list with all dictionaries from an account.
     *
     * @default
     * ```json
     * queryObj: {
     *   page: 1,
     *   fields: ["id", "name", "slug", "languages"],
     *   filter: {},
     *   amount: 20,
     *   orderBy: "name,asc",
     * }
     * ```
     *
     * @param queryObj Search query params.
     */
    async list(queryObj) {
        let result = await this.doRequest({
            path: "/dictionary",
            method: "GET",
            params: {
                page: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.page) || 1,
                fields: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.fields) || ["id", "name", "slug", "languages"],
                filter: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.filter) || {},
                amount: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.amount) || 20,
                orderBy: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.orderBy) ? `${queryObj.orderBy[0]},${queryObj.orderBy[1]}` : "name,asc",
            },
        });
        result = result.map((data) => dateParser_1.default(data, ["created_at", "updated_at"]));
        return result;
    }
    /**
     * Generate a new dictionary for the account.
     *
     * @param dictionaryObj Object with data to create new dictionary.
     */
    async create(dictionaryObj) {
        const result = await this.doRequest({
            path: "/dictionary",
            method: "POST",
            body: dictionaryObj,
        });
        return result;
    }
    /**
     * Modify any property of a dictionary.
     *
     * @param dictionaryID Dictionary ID.
     * @param dictionaryObj Dictionary Object data to be replaced.
     */
    async edit(dictionaryID, dictionaryObj) {
        const result = await this.doRequest({
            path: `/dictionary/${dictionaryID}`,
            method: "PUT",
            body: dictionaryObj,
        });
        return result;
    }
    /**
     * Delete a dictionary from the account.
     *
     * @param dictionaryID Dictionary ID.
     */
    async delete(dictionaryID) {
        const result = await this.doRequest({
            path: `/dictionary/${dictionaryID}`,
            method: "DELETE",
        });
        modules_1.Cache.clearCache();
        return result;
    }
    /**
     * Get information about a dictionary.
     *
     * @param dictionaryID Dictionary ID.
     */
    async info(dictionaryID) {
        let result = await this.doRequest({
            path: `/dictionary/${dictionaryID}`,
            method: "GET",
        });
        result = dateParser_1.default(result, ["created_at", "updated_at"]);
        return result;
    }
    async languageEdit(dictionaryID, locale, languageObj) {
        const result = await this.doRequest({
            path: `/dictionary/${dictionaryID}/${locale}`,
            method: "PUT",
            body: languageObj,
        });
        modules_1.Cache.clearCache();
        return result;
    }
    /**
     * Delete a language from a dictionary.
     *
     * @param dictionaryID Dictionary ID.
     * @param locale Language locale string (e.g. `en-US`).
     */
    async languageDelete(dictionaryID, locale) {
        const result = await this.doRequest({
            path: `/dictionary/${dictionaryID}/${locale}`,
            method: "DELETE",
        });
        modules_1.Cache.clearCache();
        return result;
    }
    /**
     * Get information about a dictionary by ID.
     *
     * @param dictionaryID Dictionary ID.
     * @param locale Language locale string (e.g. `en-US`).
     * @param queryObj Language info query params.
     */
    async languageInfo(dictionaryID, locale, queryObj) {
        const result = await this.doRequest({
            path: `/dictionary/${dictionaryID}/${locale}`,
            method: "GET",
            params: {
                // Default to not getting the fallback language info if language is not found
                // as this route is mainly used to edit a dictionary
                fallback: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.fallback) || false,
            },
        });
        return result;
    }
    /**
     * Get information about a dictionary querying by slug instead of the dictionary's ID.
     *
     * @param slug Dictionary slug.
     * @param locale Language locale string (e.g. `en-US`).
     * @param queryObj Language info query params.
     */
    async languageInfoBySlug(slug, locale, queryObj) {
        const result = await this.doRequest({
            path: `/dictionary/${slug}/${locale}`,
            method: "GET",
            params: {
                // Default to getting the fallback language info if language is not found
                // as this route is mainly used to use the dictionary strings in applications
                fallback: (queryObj === null || queryObj === void 0 ? void 0 : queryObj.fallback) || true,
            },
        });
        return result;
    }
}
exports.default = Dictionaries;
//# sourceMappingURL=Dictionaries.js.map