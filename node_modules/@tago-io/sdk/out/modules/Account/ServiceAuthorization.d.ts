import { GenericToken, ListTokenQuery, TokenCreateResponse, TokenData, TokenDataList } from "../../common/common.types";
import TagoIOModule, { GenericModuleParams } from "../../common/TagoIOModule";
declare class ServiceAuthorization extends TagoIOModule<GenericModuleParams> {
    /**
     * Retrieves a list of all tokens
     * @example
     * Default Query: {
     *   page: 1,
     *   fields: ["name", "token", "permission"],
     *   filter: {},
     *   amount: 20,
     *   orderBy: "created_at,desc",
     * }
     * @param query Search query params
     */
    tokenList(query?: ListTokenQuery): Promise<Partial<TokenDataList>[]>;
    /**
     * Generates and retrieves a new token
     * @param tokenParams Token params to create new token
     */
    tokenCreate(tokenParams: TokenData): Promise<TokenCreateResponse>;
    /**
     * Deletes a token
     * @param token Token
     */
    tokenDelete(token: GenericToken): Promise<string>;
    tokenEdit(token: GenericToken, verificationCode?: string): Promise<string>;
}
export default ServiceAuthorization;
//# sourceMappingURL=ServiceAuthorization.d.ts.map