import { GenericID, GenericToken } from "../../common/common.types";
import TagoIOModule, { GenericModuleParams } from "../../common/TagoIOModule";
import { NotificationInfo, NotificationQuery } from "./notifications.types";
declare class Notifications extends TagoIOModule<GenericModuleParams> {
    /**
     * Retrieves a list with all actions from the account
     * @param queryObj Search query params
     */
    list(queryObj?: NotificationQuery): Promise<NotificationInfo[]>;
    /**
     * Mark notifications as read
     * @param notificationIDS An array of ids or a single id
     */
    markAsRead(notificationIDS: GenericID[] | GenericID): Promise<string>;
    /**
     * Mark notifications as unread
     * @param notificationIDS An array of ids or a single id
     */
    markAsUnread(notificationIDS: GenericID[] | GenericID): Promise<string>;
    /**
     * Mark all notifications as read
     */
    markAllAsRead(): Promise<string>;
    /**
     * Acknowledge notification button pressed
     * @param notificationID ID of the notification
     * @param buttonID ID of the button
     */
    notificationButton(notificationID: GenericID, buttonID: string): Promise<string>;
    /**
     * Remove a notification
     * @param notificationID Notification identification
     */
    remove(notificationID: GenericID): Promise<string>;
    /**
     * Register device Token on Push Notification Service
     * @param deviceToken Device token
     * @param platform Platform of device
     */
    registerDevice(deviceToken: GenericToken, platform: "ios" | "android"): Promise<string>;
    /**
     * Unregister device Token on Push Notification Service
     * @param deviceToken Device token
     */
    unRegisterDevice(deviceToken: GenericToken): Promise<string>;
}
export default Notifications;
//# sourceMappingURL=Notifications.d.ts.map