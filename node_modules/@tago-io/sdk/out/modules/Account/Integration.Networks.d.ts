import { GenericID, GenericToken, ListTokenQuery, TokenCreateResponse, TokenData } from "../../common/common.types";
import TagoIOModule, { GenericModuleParams } from "../../common/TagoIOModule";
import { NetworkCreateInfo, NetworkInfo, NetworkQuery, NetworkTokenInfo } from "./integration.networks.types";
declare class Networks extends TagoIOModule<GenericModuleParams> {
    /**
     * Retrieves a list with all Networks from account
     * @default
     * ```json
     * queryObj: {
     *   page: 1,
     *   fields: ["id", "name"],
     *   filter: {},
     *   amount: 20,
     *   orderBy: "name,asc",
     * }
     * ```
     * @param queryObj Search query params
     */
    list(queryObj?: NetworkQuery): Promise<NetworkInfo[]>;
    /**
     * Get Info of the Network
     * @param networkID Network identification
     * @param fields Fields to fetch.
     */
    info(networkID: GenericID, fields?: string[]): Promise<NetworkInfo>;
    /**
     * Generates and retrieves a new network from the account
     * @param connectorObj Object data to create new Network
     */
    create(connectorObj: NetworkCreateInfo): Promise<{
        network: GenericID;
    }>;
    /**
     * Modify any property of the network
     * @param networkID Network identification
     * @param connectorObj Object data to create new Network
     */
    edit(networkID: GenericID, connectorObj: Partial<NetworkCreateInfo>): Promise<string>;
    /**
     * Retrieves a list of all tokens
     * @default
     * ```json
     * queryObj: {
     *   page: 1,
     *   fields: ["name", "token", "permission"],
     *   filter: {},
     *   amount: 20,
     *   orderBy: "created_at,desc",
     * }
     * ```
     * @param networkID Network ID
     * @param queryObj Search query params
     */
    tokenList(networkID: GenericID, queryObj?: ListTokenQuery): Promise<Partial<NetworkTokenInfo>[]>;
    /**
     * Generates and retrieves a new token
     * @param networkID Network ID
     * @param tokenParams Details of new token
     */
    tokenCreate(networkID: GenericID, tokenParams: TokenData): Promise<TokenCreateResponse>;
    /**
     * Deletes a token
     * @param token Token ID
     */
    tokenDelete(token: GenericToken): Promise<string>;
}
export default Networks;
//# sourceMappingURL=Integration.Networks.d.ts.map