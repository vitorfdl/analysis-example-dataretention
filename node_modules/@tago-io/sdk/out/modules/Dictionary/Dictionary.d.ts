import TagoIOModule from "../../common/TagoIOModule";
import { IDictionaryModuleParams, IParsedExpression, IResolveExpressionParams, IApplyToStringOptions, IDictionaryModuleParamsAnonymous } from "./dictionary.types";
import { LanguageData } from "../Account/dictionaries.types";
declare class Dictionary extends TagoIOModule<IDictionaryModuleParams> {
    language: string;
    runURL?: string;
    constructor(params: IDictionaryModuleParams);
    constructor(params: IDictionaryModuleParamsAnonymous);
    /**
     * Get the language data for a dictionary.
     *
     * @param language Language.
     * @param dictionary ID or Slug.
     * @param runURL URL for the Run to make anonymous request.
     */
    getLanguagesData(dictionary: string, language?: string): Promise<LanguageData>;
    /**
     * Get value from a key in a specific dictionary for a language.
     *
     * @param language Name of the language (locale code).
     * @param dictionary Name of the dictionary.
     * @param key Name of the key.
     *
     * @example
     * ```
     * const dictionary = new Dictionary({ language: "en-US", token: "my-token" });
     * const value = dictionary.getValueFromKey("en-US", "TEST", "OK_BUTTON_LABEL");
     * ```
     */
    getValueFromKey(language: string, dictionary: string, key: string): Promise<string>;
    /**
     * Parse an expression and extract the names of the dictionary, the key, and
     * any arguments that are passed in the expression.
     *
     * Returns `null` if the value passed is not parseable by the RegEx.
     *
     * @param expression String expression.
     *
     * @example
     * ```
     * const dictionary = new Dictionary({ language: "en-US", token: "my-token" });
     * const value = dictionary.parseExpression("#TAGORUN.WELCOME_TEXT,Hello");
     * ```
     */
    parseExpression(expression: string): IParsedExpression;
    /**
     * Resolve an expression in a language, replacing the parameters in the
     * dictionary value with the arguments passed in the expression.
     *
     * @param resolveParams Object with the language and the parsed expression (from `parseExpression`).
     *
     * @example
     * ```
     * const dictionary = new Dictionary({ language: "en-US", token: "my-token" });
     * const value = dictionary.resolveExpression({
     *   language: "en-US",
     *   expression: {
     *     dictionary: "TEST",
     *     key: "SOME_KEY",
     *     params: [
     *       "first parameter",
     *     ],
     *   },
     * });
     * ```
     */
    resolveExpression(resolveParams: IResolveExpressionParams): Promise<string>;
    /**
     * Get all (and only) the expressions in a string and their parameters if applicable,
     * ignoring normal words and phrases.
     *
     * @param rawString String with words and/or expressions.
     *
     * @example
     * ```
     * const dictionary = new Dictionary({ language: "en-US", token: "my-token" });
     * const expressions = dictionary.getExpressionsFromString("Words are ignored #TEST.DICT_KEY#");
     * ```
     */
    getExpressionsFromString(rawString: string): Promise<IParsedExpression[]>;
    /**
     * Apply the dictionary over a string, parsing the expressions in the string and
     * replacing them with the values found for the respective keys inside the dictionary
     * for a language.
     *
     * Always returns a string. Return the translated string if there are dictionary expressions,
     * the raw string with no changes if there are no expressions, and an empty string if `rawString`
     * is undefined.
     *
     * @param rawString String with words and/or expressions.
     * @param options Object containing options for the dictionary, including the language.
     *
     * @example
     * ```
     * const dictionary = new Dictionary({ language: "en-US", token: "my-token" });
     * const result = dictionary.applyToString("Words are ignored #TEST.DICT_KEY#");
     * ```
     */
    applyToString(rawString: string, options?: IApplyToStringOptions): Promise<string>;
}
export default Dictionary;
//# sourceMappingURL=Dictionary.d.ts.map