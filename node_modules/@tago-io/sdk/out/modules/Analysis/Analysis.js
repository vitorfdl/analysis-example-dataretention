"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const TagoIOModule_1 = __importDefault(require("../../common/TagoIOModule"));
const Console_1 = __importDefault(require("../Services/Console"));
const apiSocket_1 = __importStar(require("../../infrastructure/apiSocket"));
const JSONParseSafe_1 = require("../../common/JSONParseSafe");
/**
 * This class is used to instance an analysis
 *
 * It's can run locally or on TagoIO.
 */
class Analysis extends TagoIOModule_1.default {
    constructor(analysis, params = { token: "unknown" }) {
        super(params);
        this.started = false;
        this.analysis = analysis;
        if (params.autostart !== false) {
            this.start();
        }
    }
    start() {
        if (this.started) {
            return;
        }
        else {
            this.started = true;
        }
        if (!process.env.T_ANALYSIS_CONTEXT) {
            this.localRuntime();
        }
        else {
            this.runOnTagoIO();
        }
    }
    runOnTagoIO() {
        if (!this.analysis || typeof this.analysis !== "function") {
            throw "Invalid analysis function";
        }
        const context = {
            log: console.log,
            token: process.env.T_ANALYSIS_TOKEN,
            environment: JSONParseSafe_1.JSONParseSafe(process.env.T_ANALYSIS_ENV, []),
            analysis_id: process.env.T_ANALYSIS_ID,
        };
        const data = JSONParseSafe_1.JSONParseSafe(process.env.T_ANALYSIS_DATA, []);
        this.analysis(context, data);
    }
    stringifyMsg(msg) {
        return typeof msg === "object" && !Array.isArray(msg) ? JSON.stringify(msg) : String(msg);
    }
    /**
     * Run Analysis
     * @internal
     * @param environment
     * @param data
     * @param analysis_id
     * @param token
     */
    runLocal(environment, data, analysis_id, token) {
        if (!this.analysis || typeof this.analysis !== "function") {
            throw "Invalid analysis function";
        }
        const tagoConsole = new Console_1.default({ token, region: this.params.region });
        const log = (...args) => {
            var _a;
            if (!process.env.T_ANALYSIS_AUTO_RUN) {
                console.log(...args);
            }
            if ((_a = args[0]) === null || _a === void 0 ? void 0 : _a.stack) {
                args[0] = args[0].stack;
            }
            const argsStrings = Object.keys(args).map((x) => this.stringifyMsg(args[x]));
            tagoConsole.log(argsStrings.join(" ")).catch(console.error);
        };
        const context = {
            log,
            token,
            environment,
            analysis_id,
        };
        if (this.analysis.constructor.name === "AsyncFunction") {
            this.analysis(context, data || []).catch(log);
        }
        else {
            try {
                this.analysis(context, data || []);
            }
            catch (error) {
                log(error);
            }
        }
    }
    localRuntime() {
        if (this.params.token === "unknown") {
            throw "To run analysis locally, you needs a token";
        }
        const socket = apiSocket_1.default(this.params);
        socket.on("connect", () => console.info("Connected to TagoIO, Getting analysis information..."));
        socket.on("disconnect", () => console.info("Disconnected from TagoIO.\n\n"));
        socket.on("error", (e) => console.error("Connection error", e));
        socket.on("ready", (analysis) => console.info(`Analysis [${analysis.name}] Started.`));
        socket.on(apiSocket_1.channels.analysisTrigger, (scope) => {
            this.runLocal(scope.environment, scope.data, scope.analysis_id, scope.token);
        });
    }
    static use(analysis, params) {
        return new Analysis(analysis, params);
    }
}
exports.default = Analysis;
//# sourceMappingURL=Analysis.js.map