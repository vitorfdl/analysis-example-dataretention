"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isOldStructure = exports.convert = void 0;
const common_1 = require("./common");
function convert(oldWidget) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
    const oldDisplay = oldWidget.display || {};
    const newStructure = {
        dashboard: oldWidget.dashboard,
        display: {
            header_buttons: oldDisplay.header_buttons || [],
            help: oldDisplay.help || "",
            theme: {
                color: {},
            },
            variables: [],
        },
        id: oldWidget.id,
        label: oldWidget.label,
        realtime: null,
        type: "static_table",
    };
    const cells = (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.cell) || {};
    const cellKeys = Object.keys(cells);
    for (const key of cellKeys) {
        const position = {
            x: Number((_a = key.split("_")) === null || _a === void 0 ? void 0 : _a[1]) || 0,
            y: Number((_b = key.split("_")) === null || _b === void 0 ? void 0 : _b[0]) || 0,
        };
        const size = "auto";
        const dataType = ((_c = cells[key]) === null || _c === void 0 ? void 0 : _c.type) === "constant" ? "text" : "variable";
        if (dataType === "text") {
            newStructure.display.variables.push({
                allow_resize: true,
                data_type: dataType,
                id: common_1.generateWidgetItemId(),
                position,
                text_content: (_d = cells[key]) === null || _d === void 0 ? void 0 : _d.constant,
                show_bold: true,
                size,
            });
        }
        else {
            const variableObject = ((_e = cells[key]) === null || _e === void 0 ? void 0 : _e.variables) || {};
            const origin = ((_f = variableObject === null || variableObject === void 0 ? void 0 : variableObject.device) === null || _f === void 0 ? void 0 : _f.id) || "";
            const variable = (variableObject === null || variableObject === void 0 ? void 0 : variableObject.variable) || "";
            const data = { origin, variable, query: "last_value" };
            const variableKey = `${origin}${variable}`;
            const alias = (_g = oldDisplay.vars_labels) === null || _g === void 0 ? void 0 : _g[variableKey];
            const numberFormat = (_h = oldDisplay.vars_format) === null || _h === void 0 ? void 0 : _h[variableKey];
            const formula = common_1.convertFormula((_j = oldDisplay.vars_formula) === null || _j === void 0 ? void 0 : _j[variableKey]);
            const alignment = (_k = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.column_alignments) === null || _k === void 0 ? void 0 : _k[variableKey];
            const contentType = ((_l = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.conditions) === null || _l === void 0 ? void 0 : _l[variableKey]) ? "icon" : "value";
            const iconConditions = (_m = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.conditions) === null || _m === void 0 ? void 0 : _m[variableKey];
            newStructure.display.variables.push(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (alias ? { alias } : {})), (alignment ? { alignment } : {})), (contentType ? { content_type: contentType } : {})), (formula ? { formula } : {})), (iconConditions ? { icon_conditions: iconConditions } : {})), (numberFormat ? { number_format: numberFormat } : {})), { allow_resize: true, data, data_type: dataType, id: common_1.generateWidgetItemId(), position,
                size }));
            /**
             * Formulas by variable are not working because the data structure is not
             * encapsuling the new variables.
             */
            if ((formula === null || formula === void 0 ? void 0 : formula.enable) && (formula === null || formula === void 0 ? void 0 : formula.formula_type) === "variable" && (formula === null || formula === void 0 ? void 0 : formula.variable)) {
                const formulaVariable = formula === null || formula === void 0 ? void 0 : formula.variable;
                oldWidget.data.push({
                    bucket: formulaVariable === null || formulaVariable === void 0 ? void 0 : formulaVariable.bucket,
                    origin: formulaVariable === null || formulaVariable === void 0 ? void 0 : formulaVariable.origin,
                    variables: [formulaVariable === null || formulaVariable === void 0 ? void 0 : formulaVariable.variable],
                    query: "last_value",
                });
            }
        }
    }
    newStructure.data = oldWidget.data; // transfers the .data property
    return newStructure;
}
exports.convert = convert;
function isOldStructure(widget) {
    var _a, _b;
    const isOld = !!(((_a = widget === null || widget === void 0 ? void 0 : widget.display) === null || _a === void 0 ? void 0 : _a.cell) || ((_b = widget === null || widget === void 0 ? void 0 : widget.display) === null || _b === void 0 ? void 0 : _b.vars_that_have_conditions));
    return isOld;
}
exports.isOldStructure = isOldStructure;
//# sourceMappingURL=statictable.js.map