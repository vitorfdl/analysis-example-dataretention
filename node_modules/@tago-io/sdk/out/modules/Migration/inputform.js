"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isOldStructure = exports.convert = void 0;
const common_1 = require("./common");
const convertFields_1 = require("./convertFields");
function convert(oldWidget) {
    var _a, _b, _c;
    const oldDisplay = oldWidget.display || {};
    const newStructure = {
        dashboard: oldWidget.dashboard,
        display: {
            buttons: [convertFields_1.convertSubmitButton(oldDisplay, oldWidget === null || oldWidget === void 0 ? void 0 : oldWidget.analysis_run)],
            header_buttons: oldDisplay.header_buttons || [],
            help: oldDisplay.help || "",
            sections: [],
            theme: {
                color: {
                    background: null,
                    field: null,
                    header: null,
                },
            },
        },
        id: oldWidget.id,
        label: oldWidget.label,
        realtime: null,
        type: "form",
    };
    const section = {
        description: "",
        fields: [],
        id: common_1.generateWidgetItemId(),
        show_border: false,
        show_caption: false,
        title: "",
    };
    const fieldsKeys = Object.keys(((_a = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.form) === null || _a === void 0 ? void 0 : _a.fields) || []);
    for (const key of fieldsKeys) {
        const oldField = (_b = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.form) === null || _b === void 0 ? void 0 : _b.fields[key];
        const visibilityConditions = (oldField === null || oldField === void 0 ? void 0 : oldField.visibility_conditions) && Array.isArray(oldField === null || oldField === void 0 ? void 0 : oldField.visibility_conditions)
            ? oldField === null || oldField === void 0 ? void 0 : oldField.visibility_conditions.map((e) => ({
                condition: e === null || e === void 0 ? void 0 : e.condition,
                field: `${e === null || e === void 0 ? void 0 : e.variable}${e === null || e === void 0 ? void 0 : e.origin}`,
                value: e === null || e === void 0 ? void 0 : e.value,
            }))
            : [];
        /**
         * Old input form only use one field per variable,
         * so there is no problem to use his key as an id
         * when some fields use the id to reference it, it
         * will be easier to apply
         */
        const field = Object.assign(Object.assign({}, oldField), { id: key, visibility_conditions: visibilityConditions });
        const convertedField = convertFields_1.convertField(field, (_c = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.form) === null || _c === void 0 ? void 0 : _c.show_map);
        if (convertedField) {
            section.fields.push(convertedField);
        }
    }
    newStructure.display.sections.push(section);
    if (Array.isArray(oldWidget.data)) {
        newStructure.data = oldWidget.data;
    }
    return newStructure;
}
exports.convert = convert;
function isOldStructure(widget) {
    var _a, _b, _c, _d, _e;
    const isOld = !!(!((_a = widget === null || widget === void 0 ? void 0 : widget.display) === null || _a === void 0 ? void 0 : _a.buttons) ||
        ((_b = widget === null || widget === void 0 ? void 0 : widget.display) === null || _b === void 0 ? void 0 : _b.form) ||
        ((_c = widget === null || widget === void 0 ? void 0 : widget.display) === null || _c === void 0 ? void 0 : _c.input_type) ||
        ((_d = widget === null || widget === void 0 ? void 0 : widget.display) === null || _d === void 0 ? void 0 : _d.bypass_bucket) ||
        ((_e = widget === null || widget === void 0 ? void 0 : widget.display) === null || _e === void 0 ? void 0 : _e.label_submit));
    return isOld;
}
exports.isOldStructure = isOldStructure;
//# sourceMappingURL=inputform.js.map