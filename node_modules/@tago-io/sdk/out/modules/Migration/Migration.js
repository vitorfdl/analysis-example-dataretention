"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const angular_1 = require("./angular");
const areachart_1 = require("./areachart");
const card_1 = require("./card");
const clock_1 = require("./clock");
const compose_1 = require("./compose");
const custom_1 = require("./custom");
const cylinder_1 = require("./cylinder");
const dial_1 = require("./dial");
const display_1 = require("./display");
const dynamic_table_1 = require("./dynamic_table");
const grainbin_1 = require("./grainbin");
const heatmap_1 = require("./heatmap");
const horizontalbarchart_1 = require("./horizontalbarchart");
const icon_1 = require("./icon");
const image_1 = require("./image");
const imagemarker_1 = require("./imagemarker");
const inputcontrol_1 = require("./inputcontrol");
const inputform_1 = require("./inputform");
const keypad_1 = require("./keypad");
const linechart_1 = require("./linechart");
const map_1 = require("./map");
const multipleaxischart_1 = require("./multipleaxischart");
const note_1 = require("./note");
const pie_1 = require("./pie");
const pushbutton_1 = require("./pushbutton");
const semidonut_1 = require("./semidonut");
const solid_1 = require("./solid");
const statictable_1 = require("./statictable");
const stepbutton_1 = require("./stepbutton");
const tile_1 = require("./tile");
const verticalbarchart_1 = require("./verticalbarchart");
const video_1 = require("./video");
const vumeter_1 = require("./vumeter");
const TagoIOModule_1 = __importDefault(require("../../common/TagoIOModule"));
class Migration extends TagoIOModule_1.default {
    static convertImagerMarkerData(widget, widgetData) {
        return imagemarker_1.convertLayerData(widget, widgetData);
    }
    /**
     * Returns if the widget type is supported by migration
     */
    static hasMigrate(widget) {
        const { type } = widget || {};
        const { gauge_type, chart_type, layer_type } = (widget === null || widget === void 0 ? void 0 : widget.display) || {};
        switch (type) {
            case "pie":
                return true;
            case "note":
                return true;
            case "cylinder":
                return true;
            case "display":
                return true;
            case "table":
                return true;
            case "iframe":
                return true;
            case "dial":
                return true;
            case "gauge":
                if (gauge_type === "angular") {
                    return true;
                }
                else if (gauge_type === "solid") {
                    return true;
                }
                else if (gauge_type === "clock") {
                    return true;
                }
                else if (gauge_type === "vu_meter") {
                    return true;
                }
                else if (gauge_type === "dial") {
                    return true;
                }
                return false;
            case "chart":
                if (chart_type === "spline") {
                    return true;
                }
                else if (chart_type === "area") {
                    return true;
                }
                else if (chart_type === "bar_horizontal") {
                    return true;
                }
                else if (chart_type === "bar_vertical") {
                    return true;
                }
                else if (chart_type === "multiple_axis") {
                    return true;
                }
                return false;
            case "card":
                return true;
            case "tile":
                return true;
            case "keypad":
                return true;
            case "incremental_button":
            case "step_button":
                return true;
            case "push_button":
                return true;
            case "input":
                return true;
            case "icon":
                return true;
            case "map":
                return true;
            case "media":
            case "image":
                return true;
            case "layer":
                if (layer_type === "heat_map") {
                    return true;
                }
                else if (layer_type === "image_marker") {
                    return true;
                }
                else if (layer_type === "compose") {
                    return true;
                }
                else if (layer_type === "virtualization_layer") {
                    return true;
                }
                return false;
            case "grainbin":
                return true;
            default:
                return false;
        }
    }
    /**
     * Check if a widget structure is old or not,
     * based on his type
     */
    static isOldStructure(widget) {
        var _a, _b;
        const { type } = widget || {};
        const { gauge_type, chart_type, input_type, layer_type, type_media } = (widget === null || widget === void 0 ? void 0 : widget.display) || {};
        switch (type) {
            case "pie":
                return ((_a = widget === null || widget === void 0 ? void 0 : widget.display) === null || _a === void 0 ? void 0 : _a.pie_type) === "circle" ? pie_1.isOldStructure(widget) : semidonut_1.isOldStructure(widget);
            case "note":
                return note_1.isOldStructure(widget);
            case "cylinder":
                return cylinder_1.isOldStructure(widget);
            case "display":
                return display_1.isOldStructure(widget);
            case "table":
                return ((_b = widget === null || widget === void 0 ? void 0 : widget.display) === null || _b === void 0 ? void 0 : _b.table_type) === "dynamic"
                    ? dynamic_table_1.isOldStructure(widget)
                    : statictable_1.isOldStructure(widget);
            case "iframe":
                return custom_1.isOldStructure(widget);
            case "dial":
                return dial_1.isOldStructure(widget);
            case "gauge":
                if (gauge_type === "angular") {
                    return angular_1.isOldStructure(widget);
                }
                else if (gauge_type === "solid") {
                    return solid_1.isOldStructure(widget);
                }
                else if (gauge_type === "clock") {
                    return clock_1.isOldStructure(widget);
                }
                else if (gauge_type === "vu_meter") {
                    return vumeter_1.isOldStructure(widget);
                }
                else if (gauge_type === "dial") {
                    return dial_1.isOldStructure(widget);
                }
                return widget;
            case "chart":
                if (chart_type === "spline") {
                    return linechart_1.isOldStructure(widget);
                }
                else if (chart_type === "area") {
                    return areachart_1.isOldStructure(widget);
                }
                else if (chart_type === "bar_horizontal") {
                    return horizontalbarchart_1.isOldStructure(widget);
                }
                else if (chart_type === "bar_vertical") {
                    return verticalbarchart_1.isOldStructure(widget);
                }
                else if (chart_type === "multiple_axis") {
                    return multipleaxischart_1.isOldStructure(widget);
                }
                return widget;
            case "card":
                return card_1.isOldStructure(widget);
            case "tile":
                return tile_1.isOldStructure(widget);
            case "keypad":
                return keypad_1.isOldStructure(widget);
            case "incremental_button":
            case "step_button":
                return stepbutton_1.isOldStructure(widget);
            case "push_button":
                return pushbutton_1.isOldStructure(widget);
            case "input":
                return input_type === "form" ? inputform_1.isOldStructure(widget) : inputcontrol_1.isOldStructure(widget);
            case "icon":
                return icon_1.isOldStructure(widget);
            case "map":
                return map_1.isOldStructure(widget);
            case "media":
            case "image":
                if (type_media === "static_video") {
                    return video_1.isOldStructure(widget);
                }
                return image_1.isOldStructure(widget);
            case "layer":
                if (layer_type === "heat_map") {
                    return heatmap_1.isOldStructure(widget);
                }
                else if (layer_type === "image_marker") {
                    return imagemarker_1.isOldStructure(widget);
                }
                else if (layer_type === "compose") {
                    return compose_1.isOldStructure(widget);
                }
                else if (layer_type === "virtualization_layer") {
                    return compose_1.isOldStructure(widget);
                }
                return widget;
            case "grainbin":
                return grainbin_1.isOldStructure(widget);
            default:
                return false;
        }
    }
    /**
     * Convert widget old structure to new one
     */
    static convertWidget(widget) {
        var _a, _b;
        const { type } = widget || {};
        const { gauge_type, layer_type, chart_type, input_type, type_media } = (widget === null || widget === void 0 ? void 0 : widget.display) || {};
        switch (type) {
            case "pie":
                return ((_a = widget === null || widget === void 0 ? void 0 : widget.display) === null || _a === void 0 ? void 0 : _a.pie_type) === "circle" ? pie_1.convert(widget) : semidonut_1.convert(widget);
            case "note":
                return note_1.convert(widget);
            case "cylinder":
                return cylinder_1.convert(widget);
            case "display":
                return display_1.convert(widget);
            case "table":
                return ((_b = widget === null || widget === void 0 ? void 0 : widget.display) === null || _b === void 0 ? void 0 : _b.table_type) === "dynamic" ? dynamic_table_1.convert(widget) : statictable_1.convert(widget);
            case "iframe":
                return custom_1.convert(widget);
            case "dial":
                return dial_1.convert(widget);
            case "gauge":
                if (gauge_type === "angular") {
                    return angular_1.convert(widget);
                }
                else if (gauge_type === "solid") {
                    return solid_1.convert(widget);
                }
                else if (gauge_type === "clock") {
                    return clock_1.convert(widget);
                }
                else if (gauge_type === "vu_meter") {
                    return vumeter_1.convert(widget);
                }
                else if (gauge_type === "dial") {
                    return dial_1.convert(widget);
                }
                return widget;
            case "chart":
                if (chart_type === "spline") {
                    return linechart_1.convert(widget);
                }
                else if (chart_type === "area") {
                    return areachart_1.convert(widget);
                }
                else if (chart_type === "bar_horizontal") {
                    return horizontalbarchart_1.convert(widget);
                }
                else if (chart_type === "bar_vertical") {
                    return verticalbarchart_1.convert(widget);
                }
                else if (chart_type === "multiple_axis") {
                    return multipleaxischart_1.convert(widget);
                }
                return widget;
            case "card":
                return card_1.convert(widget);
            case "tile":
                return tile_1.convert(widget);
            case "keypad":
                return keypad_1.convert(widget);
            case "incremental_button":
            case "step_button":
                return stepbutton_1.convert(widget);
            case "push_button":
                return pushbutton_1.convert(widget);
            case "input":
                return input_type === "form" ? inputform_1.convert(widget) : inputcontrol_1.convert(widget);
            case "icon":
                return icon_1.convert(widget);
            case "map":
                return map_1.convert(widget);
            case "media":
            case "image":
                if (type_media === "static_video") {
                    return video_1.convert(widget);
                }
                return image_1.convert(widget);
            case "layer":
                if (layer_type === "heat_map") {
                    return heatmap_1.convert(widget);
                }
                else if (layer_type === "image_marker") {
                    return imagemarker_1.convert(widget);
                }
                else if (layer_type === "compose") {
                    return compose_1.convert(widget);
                }
                else if (layer_type === "virtualization_layer") {
                    return compose_1.convert(widget);
                }
                return widget;
            case "grainbin":
                return grainbin_1.convert(widget);
            default:
                return widget;
        }
    }
}
exports.default = Migration;
//# sourceMappingURL=Migration.js.map