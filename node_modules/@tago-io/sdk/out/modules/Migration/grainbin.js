"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isOldStructure = exports.convert = void 0;
function convert(oldWidget) {
    var _a, _b, _c;
    const oldDisplay = oldWidget.display || {};
    let decimalsString = "";
    if ((oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.numberformat) && typeof (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.numberformat) === "string") {
        decimalsString = ((_b = (_a = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.numberformat) === null || _a === void 0 ? void 0 : _a.split(".")) === null || _b === void 0 ? void 0 : _b[1]) || "";
    }
    const decimals = decimalsString.length || -1;
    const newStructure = {
        dashboard: oldWidget.dashboard,
        display: {
            alias: (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.gauge_label) || "",
            formula: {
                fixed_unit: oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.unit,
                unit_type: (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.unit) ? "fixed" : "origin",
            },
            header_buttons: oldDisplay.header_buttons || [],
            help: oldDisplay.help || "",
            number_format: {
                decimals,
                show_thousand: false,
            },
            range: {
                maximum: (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.maximum) || 100,
                minimum: (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.minimum) || 0,
                type: "minmax",
            },
            show_variables: !(oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.hide_variables),
            theme: {
                color: {
                    background: null,
                    fill: null,
                    header: null,
                    text: null,
                    text_background: null,
                },
            },
        },
        id: oldWidget.id,
        label: oldWidget.label,
        realtime: null,
        type: "grainbin",
    };
    if (Array.isArray(oldWidget.data)) {
        newStructure.data = [(_c = oldWidget.data) === null || _c === void 0 ? void 0 : _c[0]] || [];
    }
    return newStructure;
}
exports.convert = convert;
function isOldStructure(widget) {
    var _a, _b, _c, _d;
    const isOld = !!(((_a = widget === null || widget === void 0 ? void 0 : widget.display) === null || _a === void 0 ? void 0 : _a.gauge_label) ||
        ((_b = widget === null || widget === void 0 ? void 0 : widget.display) === null || _b === void 0 ? void 0 : _b.minimum) ||
        ((_c = widget === null || widget === void 0 ? void 0 : widget.display) === null || _c === void 0 ? void 0 : _c.maximum) ||
        ((_d = widget === null || widget === void 0 ? void 0 : widget.display) === null || _d === void 0 ? void 0 : _d.unit));
    return isOld;
}
exports.isOldStructure = isOldStructure;
//# sourceMappingURL=grainbin.js.map