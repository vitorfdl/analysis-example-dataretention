"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isOldStructure = exports.convert = void 0;
function convert(oldWidget) {
    const oldDisplay = oldWidget.display || {};
    const newStructure = {
        dashboard: oldWidget.dashboard,
        display: {
            buttons: (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.buttons) || [],
            bypass_bucket: oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.bypass_bucket,
            header_buttons: oldDisplay.header_buttons || [],
            help: oldDisplay.help || "",
            message_variable: oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.message_variable,
            play_audio: !!(oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.play_audio),
            send_run_user: !!(oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.send_run_user),
            show_asterisk: !!(oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.show_asterisk),
            show_digits_bar: !!(oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.show_digits_bar),
            show_last_column: !!(oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.show_last_column),
            show_last_row: !!(oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.show_last_row),
            show_number_sign: !!(oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.show_number_sign),
            theme: {
                color: {
                    background: oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.main_color,
                    click: oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.click_color,
                    header: null,
                },
            },
        },
        id: oldWidget.id,
        label: oldWidget.label,
        realtime: null,
        type: "keypad",
    };
    if (Array.isArray(oldWidget.data)) {
        newStructure.data = oldWidget.data;
    }
    return newStructure;
}
exports.convert = convert;
function isOldStructure(widget) {
    var _a, _b;
    const isOld = !!(((_a = widget === null || widget === void 0 ? void 0 : widget.display) === null || _a === void 0 ? void 0 : _a.watermark) !== undefined || ((_b = widget === null || widget === void 0 ? void 0 : widget.display) === null || _b === void 0 ? void 0 : _b.click_color));
    return isOld;
}
exports.isOldStructure = isOldStructure;
//# sourceMappingURL=keypad.js.map