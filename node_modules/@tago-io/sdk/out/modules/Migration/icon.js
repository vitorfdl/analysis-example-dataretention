"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isOldStructure = exports.convert = void 0;
const convertFormula_1 = __importDefault(require("./common/convertFormula"));
const layoutMatrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9],
];
function convert(oldWidget) {
    var _a, _b, _c, _d, _e;
    const oldDisplay = oldWidget.display || {};
    const newStructure = {
        dashboard: oldWidget.dashboard,
        display: {
            header_buttons: oldDisplay.header_buttons || [],
            help: oldDisplay.help || "",
            show_units: !!(oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.show_unit),
            show_values: !(oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.hide_values),
            show_variables: !(oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.hide_variables),
            variables: [],
        },
        id: oldWidget.id,
        label: oldWidget.label,
        realtime: null,
        type: "icon",
    };
    const variables = [];
    if (Array.isArray(oldWidget.data)) {
        newStructure.data = oldWidget.data; // transfers the .data property
        for (const item of oldWidget.data) {
            if (item.is_hide) {
                // is_hide items are not visible in the columns, so we cannot
                // put them in the variables array
                continue;
            }
            for (const variable of item.variables) {
                const key = `${item.origin}${variable}`;
                const { show_thousand, decimals } = ((_a = oldDisplay.vars_format) === null || _a === void 0 ? void 0 : _a[key]) || {};
                const numberFormat = show_thousand || decimals
                    ? {
                        decimals,
                        show_thousand,
                    }
                    : null;
                const alias = (_b = oldDisplay.vars_labels) === null || _b === void 0 ? void 0 : _b[key];
                const formula = convertFormula_1.default((_c = oldDisplay.vars_formula) === null || _c === void 0 ? void 0 : _c[key]);
                const iconConditions = ((_d = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.conditions) === null || _d === void 0 ? void 0 : _d[key]) || [];
                const colorConditions = iconConditions.map((e) => ({
                    color: e === null || e === void 0 ? void 0 : e.color,
                    condition: e === null || e === void 0 ? void 0 : e.condition,
                }));
                const layout = ((_e = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.layout) === null || _e === void 0 ? void 0 : _e[key]) || null;
                /**
                 * If none column or row has been found, it should takes the 0 position
                 * If two variables has the same position doesn't matter
                 */
                const row = (layout === null || layout === void 0 ? void 0 : layout.row) || 0;
                const column = (layout === null || layout === void 0 ? void 0 : layout.column) || 0;
                const position = layout ? layoutMatrix[row][column] : 10;
                variables.push(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ 
                    // Not sent to backend, position tracking for sorting the variables
                    _position: position, origin: item.origin, variable }, (alias ? { alias } : {})), (numberFormat ? { number_format: numberFormat } : {})), (formula ? { formula } : {})), (iconConditions ? { icon_conditions: iconConditions } : {})), (colorConditions ? { color_conditions: colorConditions } : {})));
            }
        }
    }
    /**
     * Sort by the position of the icon
     */
    variables.sort((a, b) => {
        if (a._position > b._position) {
            return 1;
        }
        if (a._position < b._position) {
            return -1;
        }
        return 0;
    });
    /**
     * Remove the _position property
     */
    newStructure.display.variables = variables.map((e) => {
        delete e._position;
        return e;
    });
    return newStructure;
}
exports.convert = convert;
function isOldStructure(widget) {
    var _a, _b, _c, _d, _e, _f, _g;
    const isOld = !!(((_a = widget === null || widget === void 0 ? void 0 : widget.display) === null || _a === void 0 ? void 0 : _a.vars_labels) ||
        ((_b = widget === null || widget === void 0 ? void 0 : widget.display) === null || _b === void 0 ? void 0 : _b.vars_format) ||
        ((_c = widget === null || widget === void 0 ? void 0 : widget.display) === null || _c === void 0 ? void 0 : _c.vars_formula) ||
        ((_d = widget === null || widget === void 0 ? void 0 : widget.display) === null || _d === void 0 ? void 0 : _d.numberformat) ||
        ((_e = widget === null || widget === void 0 ? void 0 : widget.display) === null || _e === void 0 ? void 0 : _e.hide_values) ||
        ((_f = widget === null || widget === void 0 ? void 0 : widget.display) === null || _f === void 0 ? void 0 : _f.hide_variables)) && !((_g = widget === null || widget === void 0 ? void 0 : widget.display) === null || _g === void 0 ? void 0 : _g.variables);
    return isOld;
}
exports.isOldStructure = isOldStructure;
//# sourceMappingURL=icon.js.map