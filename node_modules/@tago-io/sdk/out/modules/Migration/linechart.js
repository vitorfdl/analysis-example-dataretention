"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isOldStructure = exports.convert = void 0;
const common_1 = require("./common");
function convert(oldWidget) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    const oldDisplay = oldWidget.display || {};
    const groupBy = (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.group_by) === "date" ? "time" : oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.group_by;
    const newStructure = {
        dashboard: oldWidget.dashboard,
        display: {
            downsample: common_1.convertDownsample(oldDisplay),
            group_by: groupBy ? groupBy : "time",
            header_buttons: oldDisplay.header_buttons || [],
            help: oldDisplay.help || "",
            intervals: (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.intervals) && Array.isArray(oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.intervals) ? oldDisplay.intervals.map(common_1.convertInterval) : [],
            line_curve: (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.line_curve) ? oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.line_curve : "smooth",
            max_points: (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.max_points) || 5000,
            order_by: (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.order_by) ? oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.order_by : "time",
            show_legend: true,
            show_point_values: !!(oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.enable_labels),
            theme: {
                color: {
                    background: null,
                    header: null,
                    label: null,
                    tick: null,
                },
            },
            variables: [],
        },
        id: oldWidget.id,
        label: oldWidget.label,
        realtime: null,
        type: "line_chart",
    };
    if ((oldWidget === null || oldWidget === void 0 ? void 0 : oldWidget.realtime) === "variable" && (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.plot_by) === "time") {
        const timeVariable = ((_a = oldWidget.data.filter((e) => e === null || e === void 0 ? void 0 : e.is_global_time_data)) === null || _a === void 0 ? void 0 : _a[0]) || {};
        newStructure.display.x_axis = {
            plot_by: "variable",
            type: "time",
            variable: {
                origin: (timeVariable === null || timeVariable === void 0 ? void 0 : timeVariable.origin) || ((_b = timeVariable === null || timeVariable === void 0 ? void 0 : timeVariable.origin) === null || _b === void 0 ? void 0 : _b.id),
                variable: ((_c = timeVariable === null || timeVariable === void 0 ? void 0 : timeVariable.variables) === null || _c === void 0 ? void 0 : _c[0]) || "",
            },
        };
    }
    else if ((oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.plot_by) === "group") {
        newStructure.display.x_axis = {
            plot_by: "variable",
            type: "group",
            variable: {
                origin: ((_e = (_d = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.plot_variable_group) === null || _d === void 0 ? void 0 : _d.origin) === null || _e === void 0 ? void 0 : _e.id) || ((_f = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.plot_variable_group) === null || _f === void 0 ? void 0 : _f.origin),
                variable: (_g = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.plot_variable_group) === null || _g === void 0 ? void 0 : _g.variable,
            },
        };
    }
    else {
        newStructure.display.x_axis = {
            plot_by: "realtime",
            type: "time",
        };
    }
    if ((oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.scale) === "yes") {
        newStructure.display.y_axis = {
            scale: {
                maximum: (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.y_max) || "",
                minimum: (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.y_min) || "",
                type: "fixed",
            },
        };
    }
    else {
        newStructure.display.y_axis = {
            scale: {
                type: "dynamic",
            },
        };
    }
    newStructure.display.y_axis.show_metric_abbreviation = (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.show_abbreviation) || "";
    if (Array.isArray(oldWidget.data)) {
        newStructure.data = oldWidget.data; // transfers the .data property
        newStructure.display.variables = []; // creates the variable array
        for (const item of oldWidget.data) {
            if (item.is_hide) {
                // is_hide items are not visible, so we cannot
                // put them in the variables array
                continue;
            }
            for (const variable of item === null || item === void 0 ? void 0 : item.variables) {
                const key = `${item.origin}${variable}`;
                const alias = (_h = oldDisplay.vars_labels) === null || _h === void 0 ? void 0 : _h[key];
                const numberFormat = (_j = oldDisplay.vars_format) === null || _j === void 0 ? void 0 : _j[key];
                const formula = common_1.convertFormula((_k = oldDisplay.vars_formula) === null || _k === void 0 ? void 0 : _k[key]);
                const color = common_1.chartColors.find((e) => {
                    return !newStructure.display.variables.find((v) => (v === null || v === void 0 ? void 0 : v.color) === e);
                }) || "#999";
                newStructure.display.variables.push(Object.assign(Object.assign(Object.assign({ color, origin: item.origin, variable }, (alias ? { alias } : {})), (numberFormat ? { number_format: numberFormat } : {})), (formula ? { formula } : {})));
            }
        }
    }
    return newStructure;
}
exports.convert = convert;
function isOldStructure(widget) {
    var _a, _b, _c, _d, _e, _f;
    const isOld = !!(((_a = widget === null || widget === void 0 ? void 0 : widget.display) === null || _a === void 0 ? void 0 : _a.vars_labels) ||
        ((_b = widget === null || widget === void 0 ? void 0 : widget.display) === null || _b === void 0 ? void 0 : _b.vars_format) ||
        ((_c = widget === null || widget === void 0 ? void 0 : widget.display) === null || _c === void 0 ? void 0 : _c.numberformat) ||
        ((_d = widget === null || widget === void 0 ? void 0 : widget.display) === null || _d === void 0 ? void 0 : _d.hide_variables) !== undefined ||
        ((_e = widget === null || widget === void 0 ? void 0 : widget.display) === null || _e === void 0 ? void 0 : _e.watermark) !== undefined ||
        ((_f = widget === null || widget === void 0 ? void 0 : widget.display) === null || _f === void 0 ? void 0 : _f.pie_type));
    return isOld;
}
exports.isOldStructure = isOldStructure;
//# sourceMappingURL=linechart.js.map