"use strict";
// ? ==================================== (c) TagoIO ====================================
// * What is this file?
//     Migration of old DYNAMIC_TABLE to new DYNAMIC_TABLE
// ? ====================================================================================
Object.defineProperty(exports, "__esModule", { value: true });
exports.isOldStructure = exports.convert = exports.dynamicTableConfig = void 0;
const common_1 = require("./common");
exports.dynamicTableConfig = {
    cellFilterHeight: 56,
    cellHeight: 28,
    defaultControlColumn: {
        alias: "Controls",
        alignment: "center",
        delete_cancel_text: "Cancel",
        delete_confirm_text: "Yes, delete row",
        delete_message: "Do you really want to delete this row?",
        delete_title: "Delete row",
        fixed_width: 33,
        id: "control",
        is_control: true,
        overflow_behavior: "stretch",
        show_delete: true,
        show_edit: true,
        size: "fixed",
    },
    defaultDateColumn: {
        alias: "Date and Time",
        allow_resize: true,
        fixed_width: 100,
        id: "date",
        is_date: true,
        overflow_behavior: "stretch",
        size: "auto",
    },
};
function convert(oldWidget) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const oldDisplay = oldWidget.display || {};
    const newStructure = {
        analysis_run: oldWidget.analysis_run,
        dashboard: oldWidget.dashboard,
        display: {
            header_buttons: oldDisplay.header_buttons || [],
            help: oldDisplay.help || "",
            max_rows: oldDisplay.max_rows || 10000,
            search_position: "whole",
            show_control: false,
            show_search: oldDisplay.show_search,
            show_time: oldDisplay.show_time,
            theme: {
                color: {},
            },
            variables: [],
        },
        id: oldWidget.id,
        label: oldWidget.label,
        realtime: oldWidget.realtime,
        type: "dynamic_table",
    };
    let showEdit = false;
    let sequentialID = 0;
    let createControlColumn = false;
    if (oldDisplay.show_delete) {
        createControlColumn = true;
    }
    if (Array.isArray(oldDisplay.intervals)) {
        // transfer the intervals
        newStructure.display.intervals = oldDisplay.intervals.map(common_1.convertInterval);
    }
    if (Array.isArray(oldWidget.data)) {
        newStructure.data = oldWidget.data; // transfers the .data property
        newStructure.display.variables = []; // creates the variable array
        for (const item of oldWidget.data) {
            if (item.is_hide) {
                // is_hide items are not visible in the columns, so we cannot
                // put them in the variables array
                continue;
            }
            for (const variable of item.variables) {
                const key = `${item.origin}${variable}`;
                const keyReverse = `${variable}${item.origin}`; // form fields use key in reverse
                const alias = (_a = oldDisplay.vars_labels) === null || _a === void 0 ? void 0 : _a[key];
                const numberFormat = (_b = oldDisplay.vars_format) === null || _b === void 0 ? void 0 : _b[key];
                const formula = common_1.convertFormula((_c = oldDisplay.vars_formula) === null || _c === void 0 ? void 0 : _c[key]);
                const alignment = ((_d = oldDisplay.column_alignments) === null || _d === void 0 ? void 0 : _d[key]) || "left";
                const iconConditions = (_e = oldDisplay.conditions) === null || _e === void 0 ? void 0 : _e[key];
                const overrideColor = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.override_color;
                const usesIcon = (_f = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.vars_that_have_conditions) === null || _f === void 0 ? void 0 : _f[key];
                const allowResize = true;
                const id = `data:id:${++sequentialID}`;
                const data = {
                    origin: item.origin,
                    variable,
                };
                const formField = (_h = (_g = oldDisplay.form) === null || _g === void 0 ? void 0 : _g.fields) === null || _h === void 0 ? void 0 : _h[keyReverse];
                const edit = createEditObject(formField);
                if (edit === null || edit === void 0 ? void 0 : edit.enabled) {
                    createControlColumn = true;
                    showEdit = true;
                }
                const column = {
                    alignment,
                    allow_resize: allowResize,
                    content_type: usesIcon ? "icon" : "value",
                    data,
                    id,
                    override_color: overrideColor || false,
                };
                if (iconConditions) {
                    column.icon_conditions = iconConditions;
                }
                if (alias) {
                    column.alias = alias;
                }
                if (numberFormat && Object.keys(numberFormat).length > 0) {
                    column.number_format = numberFormat;
                }
                if (formula) {
                    column.formula = formula;
                }
                if (edit) {
                    column.edit = edit;
                }
                newStructure.display.variables.push(column);
            }
        }
    }
    // here we verify if the show_time parameter is true, and if it is
    // we need to create a new column to hold the dates information
    if (newStructure.display.show_time) {
        // create a new column for date/times
        const dateColumn = exports.dynamicTableConfig.defaultDateColumn;
        newStructure.display.variables.push(dateColumn);
    }
    // here we verify if the createControlColumn parameter is true, and if it is
    // we need to create a new column to hold the control information
    if (createControlColumn) {
        // create a new column for control
        const controlColumn = Object.assign(Object.assign({}, exports.dynamicTableConfig.defaultControlColumn), { show_delete: oldDisplay.show_delete, show_edit: showEdit, show_edit_modal: oldDisplay.show_edit_modal });
        if (oldDisplay.messageDeleteRow) {
            // if the message was informed, use the one that the use informed
            controlColumn.delete_message = oldDisplay.messageDeleteRow;
        }
        newStructure.display.variables.push(controlColumn);
        newStructure.display.show_control = true;
    }
    return newStructure;
}
exports.convert = convert;
function createEditObject(formField) {
    var _a, _b, _c, _d;
    if (!formField) {
        return null;
    }
    const edit = {
        enabled: formField.editable || false,
        required: formField.required || false,
        show_label: formField.show_label || false,
        type: formField.fieldtype || "text",
    };
    if (formField.options) {
        edit.options = formField.options;
    }
    if (formField.use_values_from === "variable") {
        edit.use_values_from = "variable";
    }
    if (formField.use_variable) {
        edit.use_values_from_variable = {
            origin: ((_b = (_a = formField.use_variable) === null || _a === void 0 ? void 0 : _a.origin) === null || _b === void 0 ? void 0 : _b.id) || ((_c = formField.use_variable) === null || _c === void 0 ? void 0 : _c.origin),
            variable: (_d = formField.use_variable) === null || _d === void 0 ? void 0 : _d.variable,
        };
        if (typeof edit.use_values_from_variable.origin !== "string") {
            // origin has to be a string. If it's not, then something went wrong
            // during the formula conversion.
            edit.use_values_from_variable = null;
        }
    }
    return edit;
}
function isOldStructure(widget) {
    var _a, _b, _c, _d, _e;
    const isOld = !!(((_a = widget === null || widget === void 0 ? void 0 : widget.display) === null || _a === void 0 ? void 0 : _a.vars_labels) ||
        ((_b = widget === null || widget === void 0 ? void 0 : widget.display) === null || _b === void 0 ? void 0 : _b.vars_format) ||
        ((_c = widget === null || widget === void 0 ? void 0 : widget.display) === null || _c === void 0 ? void 0 : _c.vars_formula) ||
        ((_d = widget === null || widget === void 0 ? void 0 : widget.display) === null || _d === void 0 ? void 0 : _d.conditions) ||
        ((_e = widget === null || widget === void 0 ? void 0 : widget.display) === null || _e === void 0 ? void 0 : _e.form));
    return isOld;
}
exports.isOldStructure = isOldStructure;
//# sourceMappingURL=dynamic_table.js.map