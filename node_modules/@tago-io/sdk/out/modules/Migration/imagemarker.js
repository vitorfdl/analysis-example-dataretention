"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isOldStructure = exports.convert = exports.convertLayerData = void 0;
const common_1 = require("./common");
function convertLayerData(widget, oldWidgetData) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
    const fields = [];
    const layerVariable = (_a = widget === null || widget === void 0 ? void 0 : widget.display) === null || _a === void 0 ? void 0 : _a.layer_variable;
    // Map old keys (Origin id + Variable name) to new key (Origin)
    const mapOldToNew = {};
    for (const dt of widget.data) {
        if (((_b = dt === null || dt === void 0 ? void 0 : dt.variables) === null || _b === void 0 ? void 0 : _b[0]) &&
            (((_c = layerVariable === null || layerVariable === void 0 ? void 0 : layerVariable.origin) === null || _c === void 0 ? void 0 : _c.id) !== (dt === null || dt === void 0 ? void 0 : dt.origin) || (layerVariable === null || layerVariable === void 0 ? void 0 : layerVariable.variable) !== ((_d = dt === null || dt === void 0 ? void 0 : dt.variables) === null || _d === void 0 ? void 0 : _d[0]))) {
            const key = `${dt === null || dt === void 0 ? void 0 : dt.origin}${(_e = dt === null || dt === void 0 ? void 0 : dt.variables) === null || _e === void 0 ? void 0 : _e[0]}`;
            mapOldToNew[key] = dt === null || dt === void 0 ? void 0 : dt.origin;
        }
    }
    for (const x of oldWidgetData) {
        if (((_g = (_f = x === null || x === void 0 ? void 0 : x.data) === null || _f === void 0 ? void 0 : _f.variables) === null || _g === void 0 ? void 0 : _g[0]) &&
            ((_h = x === null || x === void 0 ? void 0 : x.data) === null || _h === void 0 ? void 0 : _h.origin) === ((_j = layerVariable === null || layerVariable === void 0 ? void 0 : layerVariable.origin) === null || _j === void 0 ? void 0 : _j.id) &&
            ((_l = (_k = x === null || x === void 0 ? void 0 : x.data) === null || _k === void 0 ? void 0 : _k.variables) === null || _l === void 0 ? void 0 : _l[0]) === (layerVariable === null || layerVariable === void 0 ? void 0 : layerVariable.variable)) {
            for (const y of x === null || x === void 0 ? void 0 : x.result) {
                const oldFixedPos = ((_m = y === null || y === void 0 ? void 0 : y.metadata) === null || _m === void 0 ? void 0 : _m.fixed_position) || {};
                const keysFixedPos = Object.keys(oldFixedPos);
                const newFixedPos = Object.assign({}, oldFixedPos);
                for (const k of keysFixedPos) {
                    const newK = mapOldToNew === null || mapOldToNew === void 0 ? void 0 : mapOldToNew[k];
                    if (newK) {
                        newFixedPos[newK] = Object.assign({}, oldFixedPos[k]);
                    }
                }
                fields.push(Object.assign(Object.assign({}, y), { metadata: Object.assign(Object.assign({}, y === null || y === void 0 ? void 0 : y.metadata), { fixed_position: newFixedPos }) }));
            }
        }
    }
    return fields;
}
exports.convertLayerData = convertLayerData;
function convert(oldWidget) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const oldDisplay = oldWidget.display || {};
    const newStructure = {
        dashboard: oldWidget.dashboard,
        display: {
            // Image marker display properties
            allow_add: (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.allow_add) || true,
            allow_edit: (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.allow_move) || true,
            allow_edit_layers: (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.allow_edit_layers) || true,
            allow_embed_url: !!(oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.allow_embed_url),
            allow_image_url: !!(oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.allow_image_url),
            allow_label: !!(oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.allow_label),
            allow_pin_color: !!(oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.allow_pin_color),
            allow_remove: (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.allow_remove) || true,
            allow_zoom: false,
            connect_markers: !!(oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.connect_markers),
            filter_by: "device",
            filter_truncate_direction: "end",
            geofence: {
                enable_user: false,
                events_type: "static",
                limit: 100,
                type_enable_user: "all",
            },
            infobox_config: {
                behavior: "landscape",
                date_format: "",
                object_fit: "contain",
                position: "top",
                show_one_infobox: true,
            },
            layer: (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.layer_variable) || {},
            layer_sub_type: (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.layer_sub_type) === "basic" ? "basic" : "advanced",
            markdown_box: "",
            max_points: (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.max_points) || 1,
            object_fit: "contain",
            occupy_whole_widget: false,
            show_filter: false,
            show_last_update: false,
            show_polyline: false,
            show_side_value: false,
            theme: {
                color: {
                    background: null,
                    button_background: null,
                    button_icon: null,
                    header: null,
                    infobox_background: null,
                    infobox_header: null,
                    infobox_text: null,
                    zoom_button_background: null,
                    zoom_button_border: null,
                    zoom_button_icon: null,
                },
            },
            tools_title: (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.title_window) || "Tools",
            // Default properties for widgets
            header_buttons: oldDisplay.header_buttons || [],
            help: oldDisplay.help || "",
            variables: [],
        },
        id: oldWidget.id,
        label: oldWidget.label,
        realtime: null,
        type: "image_marker",
    };
    if (Array.isArray(oldWidget.data)) {
        newStructure.data = oldWidget.data; // transfers the .data property
        newStructure.display.variables = []; // creates the variable array
        for (const item of oldWidget.data) {
            if (item.is_hide) {
                // is_hide items are not visible in the columns, so we cannot
                // put them in the variables array
                continue;
            }
            for (const variable of item.variables) {
                const key = `${item.origin}${variable}`;
                const alias = (_a = oldDisplay.vars_labels) === null || _a === void 0 ? void 0 : _a[key];
                const numberFormat = (_b = oldDisplay.vars_format) === null || _b === void 0 ? void 0 : _b[key];
                const formula = common_1.convertFormula((_c = oldDisplay.vars_formula) === null || _c === void 0 ? void 0 : _c[key]);
                const varConditions = (_d = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.vars_conditions) === null || _d === void 0 ? void 0 : _d[key];
                const varUrl = (_e = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.vars_url) === null || _e === void 0 ? void 0 : _e[key];
                const varImage = (_f = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.vars_images) === null || _f === void 0 ? void 0 : _f[key];
                const varEmbed = (_g = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.vars_embed) === null || _g === void 0 ? void 0 : _g[key];
                const externalUrl = varUrl
                    ? Object.assign(Object.assign({}, ((varUrl === null || varUrl === void 0 ? void 0 : varUrl.url) ? { external_url: varUrl === null || varUrl === void 0 ? void 0 : varUrl.url } : {})), ((varUrl === null || varUrl === void 0 ? void 0 : varUrl.alias) ? { external_url_label: varUrl === null || varUrl === void 0 ? void 0 : varUrl.alias } : {})) : null;
                const urlType = (_h = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.vars_link_type) === null || _h === void 0 ? void 0 : _h[key];
                newStructure.display.variables.push(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ origin: item.origin, override_color: !(oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.override_color), url_type: urlType || "image", variable }, (alias ? { alias } : {})), (numberFormat ? { number_format: numberFormat } : {})), (formula ? { formula } : {})), (varConditions ? { color_conditions: varConditions } : {})), (externalUrl ? Object.assign({}, externalUrl) : {})), (varImage ? { img_pin: varImage } : {})), (varEmbed ? { embed: varEmbed } : {})));
            }
        }
    }
    return newStructure;
}
exports.convert = convert;
function isOldStructure(widget) {
    var _a, _b, _c, _d;
    const isOld = !!(((_a = widget === null || widget === void 0 ? void 0 : widget.display) === null || _a === void 0 ? void 0 : _a.vars_labels) ||
        ((_b = widget === null || widget === void 0 ? void 0 : widget.display) === null || _b === void 0 ? void 0 : _b.vars_formula) ||
        ((_c = widget === null || widget === void 0 ? void 0 : widget.display) === null || _c === void 0 ? void 0 : _c.numberformat) ||
        ((_d = widget === null || widget === void 0 ? void 0 : widget.display) === null || _d === void 0 ? void 0 : _d.watermark) !== undefined);
    return isOld;
}
exports.isOldStructure = isOldStructure;
//# sourceMappingURL=imagemarker.js.map