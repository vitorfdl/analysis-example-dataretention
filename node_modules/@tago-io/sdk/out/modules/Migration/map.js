"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isOldStructure = exports.convert = void 0;
const common_1 = require("./common/");
function isValidMode(mode) {
    return mode === "basic" || mode === "dark" || mode === "light" || mode === "sattelite";
}
function convertFilterBy(filterBy) {
    switch (filterBy) {
        case "values":
            return "value";
        case "devices":
            return "device";
        // When filterBy is null, the default is "variable" for legacy
        default:
            return "variable";
    }
}
function convertFilterVariables(filterVariable) {
    if (!Array.isArray(filterVariable)) {
        return [];
    }
    // Remove duplicate strings
    return [...Array.from(new Set((filterVariable === null || filterVariable === void 0 ? void 0 : filterVariable.map((e) => e === null || e === void 0 ? void 0 : e.variable)) || []))];
}
function convertGeofence(oldDisplay) {
    var _a, _b, _c, _d, _e;
    if (!(oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.geo_variable)) {
        return null;
    }
    return {
        enable_user: oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.geo_enable_user,
        events: (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.geo_events) || [],
        events_label: oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.geo_events_label,
        limit: oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.geo_limit,
        type_enable_user: (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.geo_type_enable_user) || "circle",
        variable: {
            bucket: (_b = (_a = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.geo_variable) === null || _a === void 0 ? void 0 : _a.origin) === null || _b === void 0 ? void 0 : _b.bucket,
            origin: (_d = (_c = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.geo_variable) === null || _c === void 0 ? void 0 : _c.origin) === null || _d === void 0 ? void 0 : _d.id,
            variable: (_e = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.geo_variable) === null || _e === void 0 ? void 0 : _e.variable,
        },
    };
}
/**
 * Some icons use the old form
 */
function parserIcon(cssClass) {
    switch (cssClass) {
        case "flaticon flaticon-car95":
            return "car";
        case "flaticon flaticon-pin56":
            return "location";
        case "flaticon flaticon-home152":
            return "residence";
        case "flaticon flaticon-vehicle12":
            return "bus";
        case "flaticon flaticon-scooter8":
            return "motorcycle";
        case "flaticon flaticon-delivery51":
            return "truck";
        case "flaticon flaticon-mail10":
            return "mail";
        case "flaticon flaticon-home153":
            return "residence";
        default:
            return cssClass;
    }
}
function convertGroupBy(oldGroupBy) {
    if (oldGroupBy === "date") {
        return "time";
    }
    return oldGroupBy !== null && oldGroupBy !== void 0 ? oldGroupBy : "time";
}
function convert(oldWidget) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1;
    const oldDisplay = oldWidget.display || {};
    const geofence = convertGeofence(oldDisplay);
    const filterBy = convertFilterBy(oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.filter_by);
    const canListByDevice = !!((_a = oldDisplay.filter_devices) === null || _a === void 0 ? void 0 : _a.find((e) => e === null || e === void 0 ? void 0 : e.name)) || false;
    const newStructure = {
        dashboard: oldWidget.dashboard,
        display: Object.assign(Object.assign({ center_options: {
                center_all_variables: true,
                show_only_last_values: false,
                variables: [],
            }, custom_text: Object.assign({}, ((oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.filter_title) ? { SEARCH_FOR_FILTER: oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.filter_title } : {})), direction_variable: (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.show_directions)
                ? {
                    show_current_direction: !!(oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.show_current_direction),
                    variable: {
                        origin: (_c = (_b = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.direction_variable) === null || _b === void 0 ? void 0 : _b.origin) === null || _c === void 0 ? void 0 : _c.id,
                        variable: (_d = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.direction_variable) === null || _d === void 0 ? void 0 : _d.variable,
                    },
                }
                : {}, filter_by: filterBy, filter_list_by: canListByDevice && filterBy === "device" ? "device" : "variable", filter_variables: convertFilterVariables(oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.filter_variable), group_by: convertGroupBy(oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.group_by), group_markers: (_e = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.group_markers) !== null && _e !== void 0 ? _e : true, header_buttons: oldDisplay.header_buttons || [], help: oldDisplay.help || "", infobox_config: {
                date_format: "",
                image: {
                    behavior: "landscape",
                    object_fit: "contain",
                    position: "top",
                },
                show_window_closed: (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.infowindow_closed) ? oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.infowindow_closed : true,
            }, initial_mode: isValidMode(oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.mode) ? oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.mode : "basic", intervals: ((_f = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.intervals) === null || _f === void 0 ? void 0 : _f.map(common_1.convertInterval)) || [], max_points: ((_h = (_g = oldWidget === null || oldWidget === void 0 ? void 0 : oldWidget.data) === null || _g === void 0 ? void 0 : _g[0]) === null || _h === void 0 ? void 0 : _h.query) === "last_location" ? 1 : oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.max_points, show_directions: !!(oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.show_directions), show_filter: !!(oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.show_filter), show_icons_for_all: oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.icons_for_all, show_lines: !!(oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.connect_markers), show_lines_animated: !!(oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.ant_path), variables: [] }, (geofence ? { geofence } : {})), ((oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.initial_zoom) !== 0 ? { initial_zoom: oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.initial_zoom } : {})),
        id: oldWidget.id,
        label: oldWidget.label,
        realtime: null,
        type: "map",
    };
    if (Array.isArray(oldWidget.data)) {
        newStructure.data = oldWidget.data; // transfers the .data property
        newStructure.display.variables = []; // creates the variable array
        if ((oldWidget === null || oldWidget === void 0 ? void 0 : oldWidget.query) === "last_location") {
            newStructure.display.max_points = 1;
        }
        for (const item of oldWidget.data) {
            if (item.is_hide || (item === null || item === void 0 ? void 0 : item.is_global_time_data)) {
                // is_hide items are not visible in the columns, so we cannot
                // put them in the variables array
                continue;
            }
            for (const variable of item.variables) {
                const key = `${item.origin}${variable}`;
                /**
                 * Getting the icon svg
                 */
                const icon = ((_k = (_j = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.map_icons) === null || _j === void 0 ? void 0 : _j[item.origin]) === null || _k === void 0 ? void 0 : _k.css_class) || null;
                const color = ((_m = (_l = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.map_icons) === null || _l === void 0 ? void 0 : _l[item.origin]) === null || _m === void 0 ? void 0 : _m.color) || null;
                const alias = (_o = oldDisplay.vars_labels) === null || _o === void 0 ? void 0 : _o[key];
                const numberFormat = (_p = oldDisplay.vars_format) === null || _p === void 0 ? void 0 : _p[key];
                const formula = common_1.convertFormula((_q = oldDisplay.vars_formula) === null || _q === void 0 ? void 0 : _q[key]);
                const hasConditions = ((_s = (_r = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.vars_conditions) === null || _r === void 0 ? void 0 : _r[`${item === null || item === void 0 ? void 0 : item.origin}`]) === null || _s === void 0 ? void 0 : _s.variable) === variable;
                const iconType = hasConditions ? "conditional" : "fixed";
                const iconConditions = hasConditions ? (_u = (_t = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.vars_conditions) === null || _t === void 0 ? void 0 : _t[`${item === null || item === void 0 ? void 0 : item.origin}`]) === null || _u === void 0 ? void 0 : _u.conditions : null;
                /**
                 * If the pin was not set, the default value is the
                 * map-marker.
                 */
                if (iconConditions && !(iconConditions === null || iconConditions === void 0 ? void 0 : iconConditions.url)) {
                    iconConditions.url = "https://svg.internal.tago.io/map-marker.svg";
                }
                const aliasType = ((_v = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.vars_that_have_conditions) === null || _v === void 0 ? void 0 : _v[key]) ? "icon" : "text";
                const iconLabelConditions = ((_w = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.conditions) === null || _w === void 0 ? void 0 : _w[key]) || [];
                const image = { static_image: (_x = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.vars_images) === null || _x === void 0 ? void 0 : _x[key] } || null;
                const url = ((_z = (_y = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.vars_url) === null || _y === void 0 ? void 0 : _y[key]) === null || _z === void 0 ? void 0 : _z.url) || null;
                const label = ((_1 = (_0 = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.vars_url) === null || _0 === void 0 ? void 0 : _0[key]) === null || _1 === void 0 ? void 0 : _1.alias) || null;
                const link = url || label
                    ? Object.assign(Object.assign({}, (url ? { url } : {})), (label ? { label } : {})) : null;
                const filterDevices = (oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.filter_devices) || [];
                const findFilterDevice = filterDevices.find((e) => (e === null || e === void 0 ? void 0 : e.id) === (item === null || item === void 0 ? void 0 : item.origin));
                newStructure.display.variables.push(Object.assign(Object.assign(Object.assign(Object.assign({ alias_type: aliasType, icon_conditions: iconLabelConditions, infobox: Object.assign({}, (image || link
                        ? Object.assign(Object.assign({}, (image ? { image } : {})), (link ? { link } : {})) : {})), origin: item === null || item === void 0 ? void 0 : item.origin, pin_config: Object.assign(Object.assign({ color, icon: parserIcon(icon) }, (iconType ? { icon_type: iconType } : {})), (iconConditions ? { icon_conditions: iconConditions } : {})), variable }, (alias ? { alias } : {})), (numberFormat ? { number_format: numberFormat } : {})), (formula ? { formula } : {})), (findFilterDevice ? { originName: findFilterDevice === null || findFilterDevice === void 0 ? void 0 : findFilterDevice.name } : {})));
            }
        }
    }
    return newStructure;
}
exports.convert = convert;
function isOldStructure(widget) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const isOld = !!(((_a = widget === null || widget === void 0 ? void 0 : widget.display) === null || _a === void 0 ? void 0 : _a.vars_labels) ||
        ((_b = widget === null || widget === void 0 ? void 0 : widget.display) === null || _b === void 0 ? void 0 : _b.vars_format) ||
        ((_c = widget === null || widget === void 0 ? void 0 : widget.display) === null || _c === void 0 ? void 0 : _c.vars_formula) ||
        ((_d = widget === null || widget === void 0 ? void 0 : widget.display) === null || _d === void 0 ? void 0 : _d.numberformat) ||
        ((_e = widget === null || widget === void 0 ? void 0 : widget.display) === null || _e === void 0 ? void 0 : _e.map_icons) ||
        ((_f = widget === null || widget === void 0 ? void 0 : widget.display) === null || _f === void 0 ? void 0 : _f.ignore_00) ||
        ((_g = widget === null || widget === void 0 ? void 0 : widget.display) === null || _g === void 0 ? void 0 : _g.connect_markers) ||
        ((_h = widget === null || widget === void 0 ? void 0 : widget.display) === null || _h === void 0 ? void 0 : _h.watermark) !== undefined);
    return isOld;
}
exports.isOldStructure = isOldStructure;
//# sourceMappingURL=map.js.map