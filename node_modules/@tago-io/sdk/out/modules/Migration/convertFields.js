"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertField = exports.convertFieldCaptureUser = exports.convertFieldValidation = exports.convertFieldRadio = exports.convertFieldQrCode = exports.convertFieldPassword = exports.convertFieldNumber = exports.convertFieldIncrementalSteps = exports.convertFieldImageVideoSelect = exports.convertFieldHidden = exports.convertFieldFilteredVariables = exports.convertFieldFileUpload = exports.convertFieldEmail = exports.convertFieldDropdownMultiple = exports.convertFieldDropdown = exports.convertFieldDevice = exports.convertFieldClockSet = exports.convertFieldCheckbox = exports.convertFieldCalendar = exports.convertFieldBarCode = exports.convertFieldAddress = exports.convertFieldText = exports.convertVisualField = exports.convertFormField = exports.convertSubmitButton = exports.InputFormField = void 0;
const common_1 = require("./common");
var InputFormField;
(function (InputFormField) {
    InputFormField["Text"] = "text";
    InputFormField["Address"] = "address";
    InputFormField["Barcode"] = "barcode";
    InputFormField["Calendar"] = "calendar";
    InputFormField["Capture user"] = "user";
    InputFormField["Checkbox"] = "checkbox";
    InputFormField["Clock Set"] = "clock-set";
    InputFormField["Device"] = "device";
    InputFormField["Dropdown"] = "dropdown";
    InputFormField["Dropdown Multiple"] = "dropdown-multi";
    InputFormField["Email"] = "email";
    InputFormField["File Upload"] = "upload";
    InputFormField["Filtered variables"] = "filtered";
    InputFormField["Hidden"] = "hidden";
    InputFormField["Image / Video Select"] = "image-select";
    InputFormField["Incremental Step"] = "incremental-step";
    InputFormField["Number"] = "number";
    InputFormField["Password"] = "password";
    InputFormField["QR Code"] = "qrcode";
    InputFormField["Radio"] = "radio";
    InputFormField["Validation"] = "validation";
})(InputFormField = exports.InputFormField || (exports.InputFormField = {}));
function convertDefaultValue(useCurrentValue) {
    let defaultValue = "last";
    if (typeof useCurrentValue === "string" && useCurrentValue !== "current_value") {
        defaultValue = "fixed";
    }
    return defaultValue;
}
function convertSubmitButton(oldDisplay, runAnalysis) {
    var _a, _b, _c, _d, _e, _f;
    return {
        analysis: runAnalysis || "",
        clear_form: false,
        color: "#337ab7",
        confirmation_cancel: null,
        confirmation_confirm: null,
        confirmation_message: ((_a = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.form) === null || _a === void 0 ? void 0 : _a.message_submit) || "",
        confirmation_title: null,
        icon: null,
        id: common_1.generateWidgetItemId(),
        identifier: "",
        run_analysis: !!runAnalysis,
        send_data: !((_b = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.form) === null || _b === void 0 ? void 0 : _b.bypass_bucket),
        show_confirmation: !!((_c = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.form) === null || _c === void 0 ? void 0 : _c.confirm_before_submit),
        text: !((_d = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.form) === null || _d === void 0 ? void 0 : _d.label_submit) ? "Send" : (_e = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.form) === null || _e === void 0 ? void 0 : _e.label_submit,
        wait_for_validation: !!((_f = oldDisplay === null || oldDisplay === void 0 ? void 0 : oldDisplay.form) === null || _f === void 0 ? void 0 : _f.wait_validation_unlock),
    };
}
exports.convertSubmitButton = convertSubmitButton;
function convertFormField(field) {
    return {
        data: {
            bucket: field === null || field === void 0 ? void 0 : field.bucket,
            origin: field === null || field === void 0 ? void 0 : field.origin,
            variable: field === null || field === void 0 ? void 0 : field.variable,
        },
        id: (field === null || field === void 0 ? void 0 : field.id) || common_1.generateWidgetItemId(),
    };
}
exports.convertFormField = convertFormField;
function convertVisualField(field) {
    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, convertFormField(field)), { icon: null, label: field === null || field === void 0 ? void 0 : field.label, required: !!(field === null || field === void 0 ? void 0 : field.required), show_new_line: (field === null || field === void 0 ? void 0 : field.new_line) !== undefined ? !!(field === null || field === void 0 ? void 0 : field.new_line) : true, visibility_conditions: (field === null || field === void 0 ? void 0 : field.visibility_conditions) || [] }), ((field === null || field === void 0 ? void 0 : field.placeholder) ? { placeholder: field === null || field === void 0 ? void 0 : field.placeholder } : {})), ((field === null || field === void 0 ? void 0 : field.unit) ? { unit: field === null || field === void 0 ? void 0 : field.unit } : {})), ((field === null || field === void 0 ? void 0 : field.value_type) ? { value_type: field === null || field === void 0 ? void 0 : field.value_type } : {}));
}
exports.convertVisualField = convertVisualField;
/**
 * Convert text fields to new widget format
 */
function convertFieldText(field) {
    return Object.assign(Object.assign({}, convertVisualField(field)), { default_value: convertDefaultValue(field === null || field === void 0 ? void 0 : field.use_current_value), fixed_value: field === null || field === void 0 ? void 0 : field.default, type: InputFormField.Text });
}
exports.convertFieldText = convertFieldText;
/**
 * Convert address fields to new widget format
 */
function convertFieldAddress(field, showMap) {
    return Object.assign(Object.assign({}, convertVisualField(field)), { default_value: convertDefaultValue(field === null || field === void 0 ? void 0 : field.use_current_value), fixed_value: field === null || field === void 0 ? void 0 : field.default, show_map: !!showMap, type: InputFormField.Address });
}
exports.convertFieldAddress = convertFieldAddress;
/**
 * Convert barcode fields to new widget format
 */
function convertFieldBarCode(field) {
    return Object.assign(Object.assign({}, convertVisualField(field)), { default_value: convertDefaultValue(field === null || field === void 0 ? void 0 : field.use_current_value), fixed_value: field === null || field === void 0 ? void 0 : field.default, type: InputFormField.Barcode });
}
exports.convertFieldBarCode = convertFieldBarCode;
/**
 * Convert calendar fields to new widget format
 */
function convertFieldCalendar(field) {
    var _a;
    return Object.assign(Object.assign({}, convertVisualField(field)), { allow_time: !!(field === null || field === void 0 ? void 0 : field.allow_time_select), default_value: convertDefaultValue(field === null || field === void 0 ? void 0 : field.use_current_value), fixed_value: field === null || field === void 0 ? void 0 : field.default, show_end_date: (_a = field === null || field === void 0 ? void 0 : field.hide_end_date) !== null && _a !== void 0 ? _a : true, type: InputFormField.Calendar });
}
exports.convertFieldCalendar = convertFieldCalendar;
/**
 * Convert calendar fields to new widget format
 */
function convertFieldCheckbox(field) {
    return Object.assign(Object.assign({}, convertVisualField(field)), { default_value: convertDefaultValue(field === null || field === void 0 ? void 0 : field.use_current_value), fixed_value: field === null || field === void 0 ? void 0 : field.default, type: InputFormField.Checkbox });
}
exports.convertFieldCheckbox = convertFieldCheckbox;
/**
 * Convert clock set fields to new widget format
 */
function convertFieldClockSet(field) {
    return Object.assign(Object.assign({}, convertVisualField(field)), { default_value: convertDefaultValue(field === null || field === void 0 ? void 0 : field.use_current_value), define_limits: !!(field === null || field === void 0 ? void 0 : field.enable_limit), fixed_value: field === null || field === void 0 ? void 0 : field.default, hour_visualization: field === null || field === void 0 ? void 0 : field.clock_visualization, maximum: field === null || field === void 0 ? void 0 : field.maximum, minimum: field === null || field === void 0 ? void 0 : field.minimum, step_value: field === null || field === void 0 ? void 0 : field.increment, type: InputFormField["Clock Set"] });
}
exports.convertFieldClockSet = convertFieldClockSet;
/**
 * Convert device fields to new widget format
 */
function convertFieldDevice(field) {
    return Object.assign(Object.assign({}, convertVisualField(field)), { default_value: convertDefaultValue(field === null || field === void 0 ? void 0 : field.use_current_value), fixed_value: field === null || field === void 0 ? void 0 : field.default, type: InputFormField.Device });
}
exports.convertFieldDevice = convertFieldDevice;
/**
 * Convert dropdown field to new widget format
 */
function convertFieldDropdown(field) {
    var _a, _b, _c, _d;
    return Object.assign(Object.assign({}, convertVisualField(field)), { options: ((field === null || field === void 0 ? void 0 : field.options) || []).map((e) => (Object.assign(Object.assign({ label: e === null || e === void 0 ? void 0 : e.label, value: e === null || e === void 0 ? void 0 : e.value }, ((e === null || e === void 0 ? void 0 : e.unit) ? { unit: e === null || e === void 0 ? void 0 : e.unit } : {})), ((e === null || e === void 0 ? void 0 : e.is_default) ? { default: e === null || e === void 0 ? void 0 : e.is_default } : {})))), type: InputFormField.Dropdown, use_values_from: (field === null || field === void 0 ? void 0 : field.use_values_from) === "variable" ? "variable" : "options", use_values_from_variable: {
            origin: ((_b = (_a = field === null || field === void 0 ? void 0 : field.use_variable) === null || _a === void 0 ? void 0 : _a.origin) === null || _b === void 0 ? void 0 : _b.id) || ((_c = field === null || field === void 0 ? void 0 : field.use_variable) === null || _c === void 0 ? void 0 : _c.origin),
            variable: (_d = field === null || field === void 0 ? void 0 : field.use_variable) === null || _d === void 0 ? void 0 : _d.variable,
        } });
}
exports.convertFieldDropdown = convertFieldDropdown;
/**
 * Convert dropdown multiples field to new widget format
 */
function convertFieldDropdownMultiple(field) {
    return Object.assign(Object.assign({}, convertFieldDropdown(field)), { type: InputFormField["Dropdown Multiple"] });
}
exports.convertFieldDropdownMultiple = convertFieldDropdownMultiple;
/**
 * Convert email field to new widget format
 */
function convertFieldEmail(field) {
    return Object.assign(Object.assign({}, convertVisualField(field)), { amount: "single", default_value: convertDefaultValue(field === null || field === void 0 ? void 0 : field.use_current_value), fixed_value: field === null || field === void 0 ? void 0 : field.default, type: InputFormField.Email });
}
exports.convertFieldEmail = convertFieldEmail;
/**
 * Convert file upload field to new widget format
 */
function convertFieldFileUpload(field) {
    return Object.assign(Object.assign({}, convertVisualField(field)), { maximum_files: (field === null || field === void 0 ? void 0 : field.max_files) || 1, path: (field === null || field === void 0 ? void 0 : field.path) || "", type: InputFormField["File Upload"], use_mobile_camera: !!(field === null || field === void 0 ? void 0 : field.use_camera) });
}
exports.convertFieldFileUpload = convertFieldFileUpload;
/**
 * Convert filtered variables field to new widget format
 */
function convertFieldFilteredVariables(field) {
    var _a, _b, _c, _d;
    const useValuesFromVariable = {
        origin: ((_b = (_a = field === null || field === void 0 ? void 0 : field.use_variable) === null || _a === void 0 ? void 0 : _a.origin) === null || _b === void 0 ? void 0 : _b.id) || ((_c = field === null || field === void 0 ? void 0 : field.use_variable) === null || _c === void 0 ? void 0 : _c.origin),
        variable: (_d = field === null || field === void 0 ? void 0 : field.use_variable) === null || _d === void 0 ? void 0 : _d.variable,
    };
    return Object.assign(Object.assign({}, convertVisualField(field)), { filter_amount: (field === null || field === void 0 ? void 0 : field.selection_type) || "single", filter_origin: field === null || field === void 0 ? void 0 : field.filter_origin, type: InputFormField["Filtered variables"], use_values_from_variable: Object.assign({}, useValuesFromVariable) });
}
exports.convertFieldFilteredVariables = convertFieldFilteredVariables;
/**
 * Convert hidden field to new widget format
 */
function convertFieldHidden(field) {
    return Object.assign(Object.assign({}, convertFormField(field)), { fixed_value: field === null || field === void 0 ? void 0 : field.value, type: InputFormField.Hidden, unit: (field === null || field === void 0 ? void 0 : field.unit) || "" });
}
exports.convertFieldHidden = convertFieldHidden;
/**
 * Convert Image / Video select field to new widget format
 */
function convertFieldImageVideoSelect(field) {
    var _a, _b, _c;
    return Object.assign(Object.assign({}, convertVisualField(field)), { allow_multiple: !!(field === null || field === void 0 ? void 0 : field.allow_multiple), options: ((field === null || field === void 0 ? void 0 : field.options) || []).map((e) => (Object.assign(Object.assign({ description: (e === null || e === void 0 ? void 0 : e.description) || "", label: e === null || e === void 0 ? void 0 : e.label, link: (e === null || e === void 0 ? void 0 : e.url) || "", value: e === null || e === void 0 ? void 0 : e.value }, ((e === null || e === void 0 ? void 0 : e.unit) ? { unit: e === null || e === void 0 ? void 0 : e.unit } : {})), ((e === null || e === void 0 ? void 0 : e.is_default) ? { default: e === null || e === void 0 ? void 0 : e.is_default } : {})))), show_filter: !!(field === null || field === void 0 ? void 0 : field.show_filter_value), type: InputFormField["Image / Video Select"], use_values_from: (field === null || field === void 0 ? void 0 : field.use_values_from) === "variable" ? "variable" : "options", use_values_from_variable: {
            origin: ((_b = (_a = field === null || field === void 0 ? void 0 : field.use_variable) === null || _a === void 0 ? void 0 : _a.origin) === null || _b === void 0 ? void 0 : _b.id) || ((_c = field === null || field === void 0 ? void 0 : field.use_variable) === null || _c === void 0 ? void 0 : _c.origin),
            variable: field === null || field === void 0 ? void 0 : field.variable,
        } });
}
exports.convertFieldImageVideoSelect = convertFieldImageVideoSelect;
/**
 * Convert Incremental steps field for new widget format
 */
function convertFieldIncrementalSteps(field) {
    return Object.assign(Object.assign({}, convertVisualField(field)), { default_value: convertDefaultValue(field === null || field === void 0 ? void 0 : field.use_current_value), fixed_value: field === null || field === void 0 ? void 0 : field.default, maximum: (field === null || field === void 0 ? void 0 : field.maximum) || 100, minimum: (field === null || field === void 0 ? void 0 : field.minimum) || 0, step_value: (field === null || field === void 0 ? void 0 : field.increment) || 1, type: InputFormField["Incremental Step"] });
}
exports.convertFieldIncrementalSteps = convertFieldIncrementalSteps;
/**
 * Convert Number field to new widget format
 */
function convertFieldNumber(field) {
    return Object.assign(Object.assign({}, convertVisualField(field)), { decimals: (field === null || field === void 0 ? void 0 : field.decimals) === "-1" ? "auto" : field === null || field === void 0 ? void 0 : field.decimals, default_value: convertDefaultValue(field === null || field === void 0 ? void 0 : field.use_current_value), fixed_value: field === null || field === void 0 ? void 0 : field.default, show_thousand_separator: !!(field === null || field === void 0 ? void 0 : field.show_thousand), type: InputFormField.Number });
}
exports.convertFieldNumber = convertFieldNumber;
/**
 * Convert Password field to new widget format
 */
function convertFieldPassword(field) {
    return Object.assign(Object.assign({}, convertVisualField(field)), { fixed_value: (field === null || field === void 0 ? void 0 : field.use_current_value) !== "current_value" ? field === null || field === void 0 ? void 0 : field.default : "", type: InputFormField.Password });
}
exports.convertFieldPassword = convertFieldPassword;
/**
 * Convert QR Code field to new widget format
 */
function convertFieldQrCode(field) {
    return Object.assign(Object.assign({}, convertVisualField(field)), { default_value: convertDefaultValue(field === null || field === void 0 ? void 0 : field.use_current_value), fixed_value: field === null || field === void 0 ? void 0 : field.default, type: InputFormField["QR Code"] });
}
exports.convertFieldQrCode = convertFieldQrCode;
/**
 * Convert Radio field to new widget format
 */
function convertFieldRadio(field) {
    return Object.assign(Object.assign({}, convertVisualField(field)), { options: ((field === null || field === void 0 ? void 0 : field.options) || []).map((e) => (Object.assign(Object.assign({ label: e === null || e === void 0 ? void 0 : e.label, value: e === null || e === void 0 ? void 0 : e.value }, ((e === null || e === void 0 ? void 0 : e.unit) ? { unit: e === null || e === void 0 ? void 0 : e.unit } : {})), ((e === null || e === void 0 ? void 0 : e.is_default) ? { default: e === null || e === void 0 ? void 0 : e.is_default } : {})))), type: InputFormField.Radio });
}
exports.convertFieldRadio = convertFieldRadio;
/**
 * Convert Validation field to new widget format
 */
function convertFieldValidation(field) {
    var _a;
    return Object.assign(Object.assign({}, convertFormField(field)), { fade_out: !((_a = field === null || field === void 0 ? void 0 : field.validation_message) === null || _a === void 0 ? void 0 : _a.always_show), keep_last_validation: false, show_markdown: false, type: InputFormField.Validation });
}
exports.convertFieldValidation = convertFieldValidation;
/**
 * Convert Capture user field to new widget format
 */
function convertFieldCaptureUser(field) {
    return Object.assign(Object.assign({}, convertFormField(field)), { field: (field === null || field === void 0 ? void 0 : field.field) || "", type: InputFormField["Capture user"] });
}
exports.convertFieldCaptureUser = convertFieldCaptureUser;
/**
 * Convert fields
 */
function convertField(field, showMap) {
    const { fieldtype } = field;
    switch (fieldtype) {
        case "text":
            return convertFieldText(field);
        case "address":
            return convertFieldAddress(field, showMap);
        case "barcode":
            return convertFieldBarCode(field);
        case "calendar":
            return convertFieldCalendar(field);
        case "checkbox":
            return convertFieldCheckbox(field);
        case "clock-set":
            return convertFieldClockSet(field);
        case "device":
            return convertFieldDevice(field);
        case "dropdown":
            return convertFieldDropdown(field);
        case "dropdown-multi":
            return convertFieldDropdownMultiple(field);
        case "email":
            return convertFieldEmail(field);
        case "upload":
            return convertFieldFileUpload(field);
        case "filtered":
            return convertFieldFilteredVariables(field);
        case "hidden":
            return convertFieldHidden(field);
        case "image-select":
            return convertFieldImageVideoSelect(field);
        case "incremental-step":
            return convertFieldIncrementalSteps(field);
        case "number":
            return convertFieldNumber(field);
        case "password":
            return convertFieldPassword(field);
        case "qrcode":
            return convertFieldQrCode(field);
        case "radio":
            return convertFieldRadio(field);
        case "validation":
            return convertFieldValidation(field);
        case "user":
            return convertFieldCaptureUser(field);
        default:
            return null;
    }
}
exports.convertField = convertField;
//# sourceMappingURL=convertFields.js.map